// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: helloworld/v1/cluster.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cluster_ClusterList_FullMethodName     = "/cluster.v1.Cluster/ClusterList"
	Cluster_ClusterRegister_FullMethodName = "/cluster.v1.Cluster/ClusterRegister"
	Cluster_ClusterDelete_FullMethodName   = "/cluster.v1.Cluster/ClusterDelete"
	Cluster_ClusterGet_FullMethodName      = "/cluster.v1.Cluster/ClusterGet"
	Cluster_ClusterUpdate_FullMethodName   = "/cluster.v1.Cluster/ClusterUpdate"
)

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	// List all clusters
	ClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	// Register a cluster
	ClusterRegister(ctx context.Context, in *ClusterRegisterRequest, opts ...grpc.CallOption) (*ClusterRegisterResponse, error)
	// Delete a cluster
	ClusterDelete(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterDeleteResponse, error)
	// Get a cluster
	ClusterGet(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterBase, error)
	// Update a cluster
	ClusterUpdate(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterBase, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) ClusterList(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := c.cc.Invoke(ctx, Cluster_ClusterList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterRegister(ctx context.Context, in *ClusterRegisterRequest, opts ...grpc.CallOption) (*ClusterRegisterResponse, error) {
	out := new(ClusterRegisterResponse)
	err := c.cc.Invoke(ctx, Cluster_ClusterRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterDelete(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterDeleteResponse, error) {
	out := new(ClusterDeleteResponse)
	err := c.cc.Invoke(ctx, Cluster_ClusterDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterGet(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterBase, error) {
	out := new(ClusterBase)
	err := c.cc.Invoke(ctx, Cluster_ClusterGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ClusterUpdate(ctx context.Context, in *ClusterBase, opts ...grpc.CallOption) (*ClusterBase, error) {
	out := new(ClusterBase)
	err := c.cc.Invoke(ctx, Cluster_ClusterUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	// List all clusters
	ClusterList(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	// Register a cluster
	ClusterRegister(context.Context, *ClusterRegisterRequest) (*ClusterRegisterResponse, error)
	// Delete a cluster
	ClusterDelete(context.Context, *ClusterBase) (*ClusterDeleteResponse, error)
	// Get a cluster
	ClusterGet(context.Context, *ClusterBase) (*ClusterBase, error)
	// Update a cluster
	ClusterUpdate(context.Context, *ClusterBase) (*ClusterBase, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) ClusterList(context.Context, *ClusterListRequest) (*ClusterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterList not implemented")
}
func (UnimplementedClusterServer) ClusterRegister(context.Context, *ClusterRegisterRequest) (*ClusterRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRegister not implemented")
}
func (UnimplementedClusterServer) ClusterDelete(context.Context, *ClusterBase) (*ClusterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterDelete not implemented")
}
func (UnimplementedClusterServer) ClusterGet(context.Context, *ClusterBase) (*ClusterBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterGet not implemented")
}
func (UnimplementedClusterServer) ClusterUpdate(context.Context, *ClusterBase) (*ClusterBase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterUpdate not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_ClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ClusterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterList(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ClusterRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterRegister(ctx, req.(*ClusterRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ClusterDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterDelete(ctx, req.(*ClusterBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ClusterGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterGet(ctx, req.(*ClusterBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ClusterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ClusterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ClusterUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ClusterUpdate(ctx, req.(*ClusterBase))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.v1.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterList",
			Handler:    _Cluster_ClusterList_Handler,
		},
		{
			MethodName: "ClusterRegister",
			Handler:    _Cluster_ClusterRegister_Handler,
		},
		{
			MethodName: "ClusterDelete",
			Handler:    _Cluster_ClusterDelete_Handler,
		},
		{
			MethodName: "ClusterGet",
			Handler:    _Cluster_ClusterGet_Handler,
		},
		{
			MethodName: "ClusterUpdate",
			Handler:    _Cluster_ClusterUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/cluster.proto",
}
