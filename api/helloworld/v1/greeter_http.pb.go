// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterClusterDelete = "/helloworld.v1.Greeter/ClusterDelete"
const OperationGreeterClusterGet = "/helloworld.v1.Greeter/ClusterGet"
const OperationGreeterClusterList = "/helloworld.v1.Greeter/ClusterList"
const OperationGreeterClusterRegister = "/helloworld.v1.Greeter/ClusterRegister"
const OperationGreeterClusterUpdate = "/helloworld.v1.Greeter/ClusterUpdate"
const OperationGreeterCreateInstance = "/helloworld.v1.Greeter/CreateInstance"
const OperationGreeterDeleteInstanceById = "/helloworld.v1.Greeter/DeleteInstanceById"
const OperationGreeterDeploymentList = "/helloworld.v1.Greeter/DeploymentList"
const OperationGreeterGetInstance = "/helloworld.v1.Greeter/GetInstance"
const OperationGreeterListInstances = "/helloworld.v1.Greeter/ListInstances"
const OperationGreeterNamespaceList = "/helloworld.v1.Greeter/NamespaceList"
const OperationGreeterSayHello = "/helloworld.v1.Greeter/SayHello"
const OperationGreeterSyncFromTencent = "/helloworld.v1.Greeter/SyncFromTencent"
const OperationGreeterUpdateInstance = "/helloworld.v1.Greeter/UpdateInstance"
const OperationGreeterUserList = "/helloworld.v1.Greeter/UserList"
const OperationGreeterUserRegister = "/helloworld.v1.Greeter/UserRegister"

type GreeterHTTPServer interface {
	// ClusterDelete Delete a cluster
	ClusterDelete(context.Context, *ClusterBase) (*Empty, error)
	// ClusterGet Get a cluster
	ClusterGet(context.Context, *ClusterBase) (*ClusterBase, error)
	ClusterList(context.Context, *Empty) (*ClusterListResponse, error)
	// ClusterRegister Register a cluster
	ClusterRegister(context.Context, *ClusterKubeconfig) (*ClusterBase, error)
	// ClusterUpdate Update a cluster
	ClusterUpdate(context.Context, *ClusterBase) (*ClusterBase, error)
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceReply, error)
	DeleteInstanceById(context.Context, *DeleteInstanceRequest) (*DeleteInstanceReply, error)
	DeploymentList(context.Context, *DeploymentReq) (*DeploymentResp, error)
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceReply, error)
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesReply, error)
	NamespaceList(context.Context, *NamespaceReq) (*NamespaceResp, error)
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SyncFromTencent(context.Context, *SyncFromTencentRequest) (*SyncFromTencentReply, error)
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceReply, error)
	UserList(context.Context, *Empty) (*UserListResponse, error)
	// UserRegister Register a user
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/helloworld/{name}", _Greeter_SayHello0_HTTP_Handler(srv))
	r.POST("/user/register", _Greeter_UserRegister0_HTTP_Handler(srv))
	r.GET("/user", _Greeter_UserList0_HTTP_Handler(srv))
	r.GET("/clusters", _Greeter_ClusterList0_HTTP_Handler(srv))
	r.GET("/namespaces/{cluster}", _Greeter_NamespaceList0_HTTP_Handler(srv))
	r.GET("/cmdb/instance/{instanceId}", _Greeter_GetInstance0_HTTP_Handler(srv))
	r.POST("/cmdb/instance", _Greeter_CreateInstance0_HTTP_Handler(srv))
	r.GET("/cmdb/instances", _Greeter_ListInstances0_HTTP_Handler(srv))
	r.DELETE("/cmdb/instance/{instanceId}", _Greeter_DeleteInstanceById0_HTTP_Handler(srv))
	r.PUT("/cmdb/instance/{instanceId}", _Greeter_UpdateInstance0_HTTP_Handler(srv))
	r.POST("/cmdb/sync/tencent", _Greeter_SyncFromTencent0_HTTP_Handler(srv))
	r.GET("/deployments/{cluster}/{namespace}", _Greeter_DeploymentList0_HTTP_Handler(srv))
	r.POST("/cluster", _Greeter_ClusterRegister0_HTTP_Handler(srv))
	r.DELETE("/cluster/{id}", _Greeter_ClusterDelete0_HTTP_Handler(srv))
	r.GET("/cluster/{id}", _Greeter_ClusterGet0_HTTP_Handler(srv))
	r.PUT("/cluster/{id}", _Greeter_ClusterUpdate0_HTTP_Handler(srv))
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UserRegister0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UserList0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ClusterList0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterClusterList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClusterList(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterListResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_NamespaceList0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NamespaceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterNamespaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NamespaceList(ctx, req.(*NamespaceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NamespaceResp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetInstance0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInstanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetInstance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInstance(ctx, req.(*GetInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInstanceReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_CreateInstance0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateInstance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInstance(ctx, req.(*CreateInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInstanceReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ListInstances0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInstancesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterListInstances)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInstances(ctx, req.(*ListInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInstancesReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_DeleteInstanceById0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInstanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterDeleteInstanceById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInstanceById(ctx, req.(*DeleteInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInstanceReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UpdateInstance0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUpdateInstance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateInstance(ctx, req.(*UpdateInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateInstanceReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_SyncFromTencent0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SyncFromTencentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSyncFromTencent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SyncFromTencent(ctx, req.(*SyncFromTencentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SyncFromTencentReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_DeploymentList0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeploymentReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterDeploymentList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeploymentList(ctx, req.(*DeploymentReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeploymentResp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ClusterRegister0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterKubeconfig
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterClusterRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClusterRegister(ctx, req.(*ClusterKubeconfig))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterBase)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ClusterDelete0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterBase
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterClusterDelete)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClusterDelete(ctx, req.(*ClusterBase))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ClusterGet0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterBase
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterClusterGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClusterGet(ctx, req.(*ClusterBase))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterBase)
		return ctx.Result(200, reply)
	}
}

func _Greeter_ClusterUpdate0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterBase
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterClusterUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClusterUpdate(ctx, req.(*ClusterBase))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterBase)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	ClusterDelete(ctx context.Context, req *ClusterBase, opts ...http.CallOption) (rsp *Empty, err error)
	ClusterGet(ctx context.Context, req *ClusterBase, opts ...http.CallOption) (rsp *ClusterBase, err error)
	ClusterList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *ClusterListResponse, err error)
	ClusterRegister(ctx context.Context, req *ClusterKubeconfig, opts ...http.CallOption) (rsp *ClusterBase, err error)
	ClusterUpdate(ctx context.Context, req *ClusterBase, opts ...http.CallOption) (rsp *ClusterBase, err error)
	CreateInstance(ctx context.Context, req *CreateInstanceRequest, opts ...http.CallOption) (rsp *CreateInstanceReply, err error)
	DeleteInstanceById(ctx context.Context, req *DeleteInstanceRequest, opts ...http.CallOption) (rsp *DeleteInstanceReply, err error)
	DeploymentList(ctx context.Context, req *DeploymentReq, opts ...http.CallOption) (rsp *DeploymentResp, err error)
	GetInstance(ctx context.Context, req *GetInstanceRequest, opts ...http.CallOption) (rsp *GetInstanceReply, err error)
	ListInstances(ctx context.Context, req *ListInstancesRequest, opts ...http.CallOption) (rsp *ListInstancesReply, err error)
	NamespaceList(ctx context.Context, req *NamespaceReq, opts ...http.CallOption) (rsp *NamespaceResp, err error)
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
	SyncFromTencent(ctx context.Context, req *SyncFromTencentRequest, opts ...http.CallOption) (rsp *SyncFromTencentReply, err error)
	UpdateInstance(ctx context.Context, req *UpdateInstanceRequest, opts ...http.CallOption) (rsp *UpdateInstanceReply, err error)
	UserList(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *UserListResponse, err error)
	UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...http.CallOption) (rsp *UserRegisterResponse, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) ClusterDelete(ctx context.Context, in *ClusterBase, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/cluster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterClusterDelete))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ClusterGet(ctx context.Context, in *ClusterBase, opts ...http.CallOption) (*ClusterBase, error) {
	var out ClusterBase
	pattern := "/cluster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterClusterGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ClusterList(ctx context.Context, in *Empty, opts ...http.CallOption) (*ClusterListResponse, error) {
	var out ClusterListResponse
	pattern := "/clusters"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterClusterList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ClusterRegister(ctx context.Context, in *ClusterKubeconfig, opts ...http.CallOption) (*ClusterBase, error) {
	var out ClusterBase
	pattern := "/cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterClusterRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ClusterUpdate(ctx context.Context, in *ClusterBase, opts ...http.CallOption) (*ClusterBase, error) {
	var out ClusterBase
	pattern := "/cluster/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterClusterUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...http.CallOption) (*CreateInstanceReply, error) {
	var out CreateInstanceReply
	pattern := "/cmdb/instance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCreateInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) DeleteInstanceById(ctx context.Context, in *DeleteInstanceRequest, opts ...http.CallOption) (*DeleteInstanceReply, error) {
	var out DeleteInstanceReply
	pattern := "/cmdb/instance/{instanceId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterDeleteInstanceById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) DeploymentList(ctx context.Context, in *DeploymentReq, opts ...http.CallOption) (*DeploymentResp, error) {
	var out DeploymentResp
	pattern := "/deployments/{cluster}/{namespace}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterDeploymentList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...http.CallOption) (*GetInstanceReply, error) {
	var out GetInstanceReply
	pattern := "/cmdb/instance/{instanceId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...http.CallOption) (*ListInstancesReply, error) {
	var out ListInstancesReply
	pattern := "/cmdb/instances"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterListInstances))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) NamespaceList(ctx context.Context, in *NamespaceReq, opts ...http.CallOption) (*NamespaceResp, error) {
	var out NamespaceResp
	pattern := "/namespaces/{cluster}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterNamespaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/helloworld/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) SyncFromTencent(ctx context.Context, in *SyncFromTencentRequest, opts ...http.CallOption) (*SyncFromTencentReply, error) {
	var out SyncFromTencentReply
	pattern := "/cmdb/sync/tencent"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterSyncFromTencent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...http.CallOption) (*UpdateInstanceReply, error) {
	var out UpdateInstanceReply
	pattern := "/cmdb/instance/{instanceId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterUpdateInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UserList(ctx context.Context, in *Empty, opts ...http.CallOption) (*UserListResponse, error) {
	var out UserListResponse
	pattern := "/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...http.CallOption) (*UserRegisterResponse, error) {
	var out UserRegisterResponse
	pattern := "/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
