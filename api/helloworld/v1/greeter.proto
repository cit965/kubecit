syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "kubecit/api/helloworld/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      get: "/helloworld/{name}"
    };
  }

  // Register a user
  rpc UserRegister (UserRegisterRequest) returns (UserRegisterResponse) {
    option (google.api.http) = {
      post: "/user/register"
      body: "*"
    };
  }

  rpc UserList (Empty) returns (UserListResponse) {
    option (google.api.http) = {
      get: "/user"
    };
  }


  rpc ClusterList (Empty) returns (ClusterListResponse) {
    option (google.api.http) = {
      get: "/clusters"
    };
  }

  rpc NamespaceList (Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/namespaces"
    };
  }

  rpc GetInstance(GetInstanceRequest) returns (GetInstanceReply) {
    option (google.api.http) = {
      get: "/cmdb/getInstance/{UUID}",
    };
  };
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceReply) {
    option (google.api.http) = {
      post: "/cmdb/createInstance",
      body: "*",
    };
  };
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesReply){
    option (google.api.http) = {
      get: "/cmdb/listInstances",
    };
  };
  rpc DeleteInstanceById(DeleteInstanceRequest) returns (DeleteInstanceReply){
    option (google.api.http) = {
      delete: "/cmdb/deleteInstance/{UUID}",
    };
  };
  rpc UpdateInstance(UpdateInstanceRequest) returns (UpdateInstanceReply){
    option (google.api.http) = {
      put: "/cmdb/updateInstance/{UUID}",
      body: "*",
    };
  };
  rpc SyncFromTencent(SyncFromTencentRequest) returns (SyncFromTencentReply) {
    option (google.api.http) = {
      post: "/cmdb/SyncFromTencent",
      body: "*",
    };
  };
}


message Empty {

}

message User {
  string username = 1;
  string password = 2;
}

message UserListResponse{
  repeated User users = 1;
}

message Cluster {
  string kubeconfig = 1;
  int32  id = 2;
}

message  ClusterListResponse{
  repeated Cluster clusters = 1;
}

message UserRegisterRequest {
  string username = 1;
  string password = 2;
}

message UserRegisterResponse {
  string result = 1;
}


// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message Host {
  string UUID = 1;
  string State = 2;
  repeated string IPV6AddressPublic = 3;
  repeated string IPV6AddressPrivate = 4;
  repeated string IPV4AddressPublic = 5;
  repeated string IPV4AddressPrivate = 6;
  int64 Memory = 7;
  int64 CPU = 8;
  google.protobuf.Timestamp CreatedTime = 9;
  google.protobuf.Timestamp ExpitedTime = 10;
  string InstanceName = 11;
  string ImageName = 12;
  string OSType = 13;
  string Manufacturer = 14;
  string Zone = 15;
  repeated string SecurityGroups = 16;
  string BillType = 17;
  string ChargeType = 18;
  bool IsActive = 19;
  string InstanceType = 20;

}
message SyncFromTencentRequest{
  string accessKey = 1;
  string secretKey = 2;
  string region = 3;
}

message SyncFromTencentReply {
  string message = 1;
  int64 total = 2;
}

message GetInstanceRequest {
  string UUID = 1;
}

message GetInstanceReply {
  Host Instance = 1;
}

message CreateInstanceRequest {
  Host Instance = 1;
}

message CreateInstanceReply {
  Host Instance = 1;
}

message ListInstancesRequest {}

message ListInstancesReply {
  int64 total = 1;
  repeated Host Instances = 2;
}

message UpdateInstanceRequest {
  string UUID = 1;
  Host Instance = 2;
}

message UpdateInstanceReply {
  Host Instance = 1;
}

message DeleteInstanceRequest {
  string UUID = 1;
}

message DeleteInstanceReply {}