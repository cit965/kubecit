syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";

option go_package = "kubecit/api/helloworld/v1;v1";
option java_multiple_files = true;
option java_package = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      get: "/helloworld/{name}"
    };
  }

  // Register a user
  rpc UserRegister (UserRegisterRequest) returns (UserRegisterResponse) {
    option (google.api.http) = {
      post: "/user/register"
      body: "*"
    };
  }

  rpc UserList (Empty) returns (UserListResponse) {
    option (google.api.http) = {
      get: "/user"
    };
  }


  rpc ClusterList (Empty) returns (ClusterListResponse) {
    option (google.api.http) = {
      get: "/clusters"
    };
  }

  rpc NamespaceList (NamespaceReq) returns (NamespaceResp) {
    option (google.api.http) = {
      get: "/namespaces/{cluster}"
    };
  }

  rpc GetInstance(GetInstanceRequest) returns (GetInstanceReply) {
    option (google.api.http) = {
      get: "/cmdb/instance/{instanceId}",
    };
  };
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceReply) {
    option (google.api.http) = {
      post: "/cmdb/instance",
      body: "*",
    };
  };
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesReply){
    option (google.api.http) = {
      get: "/cmdb/instances",
    };
  };
  rpc DeleteInstanceById(DeleteInstanceRequest) returns (DeleteInstanceReply){
    option (google.api.http) = {
      delete: "/cmdb/instance/{instanceId}",
    };
  };
  rpc UpdateInstance(UpdateInstanceRequest) returns (UpdateInstanceReply){
    option (google.api.http) = {
      put: "/cmdb/instance/{instanceId}",
      body: "*",
    };
  };
  rpc SyncFromCloudProvider(SyncFromCloudProviderRequest) returns (SyncFromCloudProviderReply) {
    option (google.api.http) = {
      post: "/cmdb/sync/{cloudProvider}",
      body: "*",
    };
  };
  rpc DeploymentList (DeploymentReq) returns (DeploymentResp) {
    option (google.api.http) = {
      get: "/deployments/{cluster}/{namespace}"
    };
  }

  // Register a cluster
  rpc ClusterRegister (ClusterKubeconfig) returns (ClusterBase) {
    option (google.api.http) = {
      post: "/cluster"
      body: "*"
    };
  }

  // Delete a cluster
  rpc ClusterDelete (ClusterBase) returns (Empty) {
    option (google.api.http) = {
      delete: "/cluster/{id}"
    };
  }

  // Get a cluster
  rpc ClusterGet (ClusterBase) returns (ClusterBase) {
    option (google.api.http) = {
      get: "/cluster/{id}"
    };
  }

  // Update a cluster
  rpc ClusterUpdate (ClusterBase) returns (ClusterBase) {
    option (google.api.http) = {
      put: "/cluster/{id}"
      body: "*"
    };
  }

}


message Empty {}

message User {
  string username = 1;
  string password = 2;
}

message UserListResponse{
  repeated User users = 1;
}

message Cluster {
  string kubeconfig = 1;
  int32  id = 2;
}

message  ClusterListResponse{
  repeated Cluster clusters = 1;
}

message UserRegisterRequest {
  string username = 1;
  string password = 2;
}

message UserRegisterResponse {
  string result = 1;
}


// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

message NamespaceResp {
  repeated string namespaces =1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message Host {
  string vpcId = 1;
  string subnetId = 2;
  string instanceId = 3;
  string instanceName = 4;
  string instanceState = 5;
  int64 cpu = 6;
  int64 memory = 7;
  string createdTime = 8;
  string instanceType = 9;
  int64 eniLimit = 10;
  int64 enilpLimit = 11;
  int64 instanceEniCount = 12;
}

message SyncFromCloudProviderRequest {
  string accessKey = 1;
  string secretKey = 2;
  string region = 3;
  string vpcId = 4;
  string cloudProvider = 5;
}

message SyncFromCloudProviderReply {
  string message = 1;
  int64 total = 2;
}

message GetInstanceRequest {
  string instanceId = 1;
}

message GetInstanceReply {
  Host instance = 1;
}

message CreateInstanceRequest {
  Host instance = 1;
}

message CreateInstanceReply {
  Host instance = 1;
}

message ListInstancesRequest {}

message ListInstancesReply {
  int64 total = 1;
  repeated Host instances = 2;
}

message UpdateInstanceRequest {
  string instanceId = 1;
  Host instance = 2;
}

message UpdateInstanceReply {
  Host instance = 1;
  string message = 2;
}

message DeleteInstanceRequest {
  string instanceId = 1;
}

message DeleteInstanceReply {
  string message = 1;
}

message NamespaceReq{
  int32 cluster = 1;
}

message DeploymentReq{
  int32 cluster = 1;
  string namespace = 2;
}

message DeploymentResp {
  repeated string deployments =1;
}

message ClusterBase {
  int64 id = 1;
  string kubeconfig = 2;
}

message ClusterKubeconfig{
  string kubeconfig = 1;
}
