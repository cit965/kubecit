// Code generated by ent, DO NOT EDIT.

package cluster

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cluster type in the database.
	Label = "cluster"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKubeconfig holds the string denoting the kubeconfig field in the database.
	FieldKubeconfig = "kubeconfig"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// Table holds the table name of the cluster in the database.
	Table = "clusters"
)

// Columns holds all SQL columns for cluster fields.
var Columns = []string{
	FieldID,
	FieldKubeconfig,
	FieldAlias,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultKubeconfig holds the default value on creation for the "kubeconfig" field.
	DefaultKubeconfig string
	// DefaultAlias holds the default value on creation for the "alias" field.
	DefaultAlias string
)

// OrderOption defines the ordering options for the Cluster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKubeconfig orders the results by the kubeconfig field.
func ByKubeconfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKubeconfig, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}
