// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit/ent/cloudprovider"
	"kubecit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CloudProviderUpdate is the builder for updating CloudProvider entities.
type CloudProviderUpdate struct {
	config
	hooks    []Hook
	mutation *CloudProviderMutation
}

// Where appends a list predicates to the CloudProviderUpdate builder.
func (cpu *CloudProviderUpdate) Where(ps ...predicate.CloudProvider) *CloudProviderUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetKey sets the "key" field.
func (cpu *CloudProviderUpdate) SetKey(s string) *CloudProviderUpdate {
	cpu.mutation.SetKey(s)
	return cpu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cpu *CloudProviderUpdate) SetNillableKey(s *string) *CloudProviderUpdate {
	if s != nil {
		cpu.SetKey(*s)
	}
	return cpu
}

// SetSecret sets the "secret" field.
func (cpu *CloudProviderUpdate) SetSecret(s string) *CloudProviderUpdate {
	cpu.mutation.SetSecret(s)
	return cpu
}

// SetType sets the "type" field.
func (cpu *CloudProviderUpdate) SetType(i int64) *CloudProviderUpdate {
	cpu.mutation.ResetType()
	cpu.mutation.SetType(i)
	return cpu
}

// AddType adds i to the "type" field.
func (cpu *CloudProviderUpdate) AddType(i int64) *CloudProviderUpdate {
	cpu.mutation.AddType(i)
	return cpu
}

// SetName sets the "name" field.
func (cpu *CloudProviderUpdate) SetName(s string) *CloudProviderUpdate {
	cpu.mutation.SetName(s)
	return cpu
}

// Mutation returns the CloudProviderMutation object of the builder.
func (cpu *CloudProviderUpdate) Mutation() *CloudProviderMutation {
	return cpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CloudProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CloudProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CloudProviderUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CloudProviderUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *CloudProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudprovider.Table, cloudprovider.Columns, sqlgraph.NewFieldSpec(cloudprovider.FieldID, field.TypeInt))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Key(); ok {
		_spec.SetField(cloudprovider.FieldKey, field.TypeString, value)
	}
	if value, ok := cpu.mutation.Secret(); ok {
		_spec.SetField(cloudprovider.FieldSecret, field.TypeString, value)
	}
	if value, ok := cpu.mutation.GetType(); ok {
		_spec.SetField(cloudprovider.FieldType, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.AddedType(); ok {
		_spec.AddField(cloudprovider.FieldType, field.TypeInt64, value)
	}
	if value, ok := cpu.mutation.Name(); ok {
		_spec.SetField(cloudprovider.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CloudProviderUpdateOne is the builder for updating a single CloudProvider entity.
type CloudProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CloudProviderMutation
}

// SetKey sets the "key" field.
func (cpuo *CloudProviderUpdateOne) SetKey(s string) *CloudProviderUpdateOne {
	cpuo.mutation.SetKey(s)
	return cpuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cpuo *CloudProviderUpdateOne) SetNillableKey(s *string) *CloudProviderUpdateOne {
	if s != nil {
		cpuo.SetKey(*s)
	}
	return cpuo
}

// SetSecret sets the "secret" field.
func (cpuo *CloudProviderUpdateOne) SetSecret(s string) *CloudProviderUpdateOne {
	cpuo.mutation.SetSecret(s)
	return cpuo
}

// SetType sets the "type" field.
func (cpuo *CloudProviderUpdateOne) SetType(i int64) *CloudProviderUpdateOne {
	cpuo.mutation.ResetType()
	cpuo.mutation.SetType(i)
	return cpuo
}

// AddType adds i to the "type" field.
func (cpuo *CloudProviderUpdateOne) AddType(i int64) *CloudProviderUpdateOne {
	cpuo.mutation.AddType(i)
	return cpuo
}

// SetName sets the "name" field.
func (cpuo *CloudProviderUpdateOne) SetName(s string) *CloudProviderUpdateOne {
	cpuo.mutation.SetName(s)
	return cpuo
}

// Mutation returns the CloudProviderMutation object of the builder.
func (cpuo *CloudProviderUpdateOne) Mutation() *CloudProviderMutation {
	return cpuo.mutation
}

// Where appends a list predicates to the CloudProviderUpdate builder.
func (cpuo *CloudProviderUpdateOne) Where(ps ...predicate.CloudProvider) *CloudProviderUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CloudProviderUpdateOne) Select(field string, fields ...string) *CloudProviderUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CloudProvider entity.
func (cpuo *CloudProviderUpdateOne) Save(ctx context.Context) (*CloudProvider, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CloudProviderUpdateOne) SaveX(ctx context.Context) *CloudProvider {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CloudProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CloudProviderUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *CloudProviderUpdateOne) sqlSave(ctx context.Context) (_node *CloudProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(cloudprovider.Table, cloudprovider.Columns, sqlgraph.NewFieldSpec(cloudprovider.FieldID, field.TypeInt))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudprovider.FieldID)
		for _, f := range fields {
			if !cloudprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Key(); ok {
		_spec.SetField(cloudprovider.FieldKey, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.Secret(); ok {
		_spec.SetField(cloudprovider.FieldSecret, field.TypeString, value)
	}
	if value, ok := cpuo.mutation.GetType(); ok {
		_spec.SetField(cloudprovider.FieldType, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.AddedType(); ok {
		_spec.AddField(cloudprovider.FieldType, field.TypeInt64, value)
	}
	if value, ok := cpuo.mutation.Name(); ok {
		_spec.SetField(cloudprovider.FieldName, field.TypeString, value)
	}
	_node = &CloudProvider{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
