// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"kubecit/ent/cloudprovider"
	"kubecit/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CloudProviderDelete is the builder for deleting a CloudProvider entity.
type CloudProviderDelete struct {
	config
	hooks    []Hook
	mutation *CloudProviderMutation
}

// Where appends a list predicates to the CloudProviderDelete builder.
func (cpd *CloudProviderDelete) Where(ps ...predicate.CloudProvider) *CloudProviderDelete {
	cpd.mutation.Where(ps...)
	return cpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cpd *CloudProviderDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cpd.sqlExec, cpd.mutation, cpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cpd *CloudProviderDelete) ExecX(ctx context.Context) int {
	n, err := cpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cpd *CloudProviderDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cloudprovider.Table, sqlgraph.NewFieldSpec(cloudprovider.FieldID, field.TypeInt))
	if ps := cpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cpd.mutation.done = true
	return affected, err
}

// CloudProviderDeleteOne is the builder for deleting a single CloudProvider entity.
type CloudProviderDeleteOne struct {
	cpd *CloudProviderDelete
}

// Where appends a list predicates to the CloudProviderDelete builder.
func (cpdo *CloudProviderDeleteOne) Where(ps ...predicate.CloudProvider) *CloudProviderDeleteOne {
	cpdo.cpd.mutation.Where(ps...)
	return cpdo
}

// Exec executes the deletion query.
func (cpdo *CloudProviderDeleteOne) Exec(ctx context.Context) error {
	n, err := cpdo.cpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cloudprovider.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cpdo *CloudProviderDeleteOne) ExecX(ctx context.Context) {
	if err := cpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
