// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"kubecit/ent/migrate"

	"kubecit/ent/cloudhost"
	"kubecit/ent/cluster"
	"kubecit/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CloudHost is the client for interacting with the CloudHost builders.
	CloudHost *CloudHostClient
	// Cluster is the client for interacting with the Cluster builders.
	Cluster *ClusterClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CloudHost = NewCloudHostClient(c.config)
	c.Cluster = NewClusterClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		CloudHost: NewCloudHostClient(cfg),
		Cluster:   NewClusterClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		CloudHost: NewCloudHostClient(cfg),
		Cluster:   NewClusterClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CloudHost.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CloudHost.Use(hooks...)
	c.Cluster.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CloudHost.Intercept(interceptors...)
	c.Cluster.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CloudHostMutation:
		return c.CloudHost.mutate(ctx, m)
	case *ClusterMutation:
		return c.Cluster.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CloudHostClient is a client for the CloudHost schema.
type CloudHostClient struct {
	config
}

// NewCloudHostClient returns a client for the CloudHost from the given config.
func NewCloudHostClient(c config) *CloudHostClient {
	return &CloudHostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cloudhost.Hooks(f(g(h())))`.
func (c *CloudHostClient) Use(hooks ...Hook) {
	c.hooks.CloudHost = append(c.hooks.CloudHost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cloudhost.Intercept(f(g(h())))`.
func (c *CloudHostClient) Intercept(interceptors ...Interceptor) {
	c.inters.CloudHost = append(c.inters.CloudHost, interceptors...)
}

// Create returns a builder for creating a CloudHost entity.
func (c *CloudHostClient) Create() *CloudHostCreate {
	mutation := newCloudHostMutation(c.config, OpCreate)
	return &CloudHostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CloudHost entities.
func (c *CloudHostClient) CreateBulk(builders ...*CloudHostCreate) *CloudHostCreateBulk {
	return &CloudHostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CloudHost.
func (c *CloudHostClient) Update() *CloudHostUpdate {
	mutation := newCloudHostMutation(c.config, OpUpdate)
	return &CloudHostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CloudHostClient) UpdateOne(ch *CloudHost) *CloudHostUpdateOne {
	mutation := newCloudHostMutation(c.config, OpUpdateOne, withCloudHost(ch))
	return &CloudHostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CloudHostClient) UpdateOneID(id int) *CloudHostUpdateOne {
	mutation := newCloudHostMutation(c.config, OpUpdateOne, withCloudHostID(id))
	return &CloudHostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CloudHost.
func (c *CloudHostClient) Delete() *CloudHostDelete {
	mutation := newCloudHostMutation(c.config, OpDelete)
	return &CloudHostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CloudHostClient) DeleteOne(ch *CloudHost) *CloudHostDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CloudHostClient) DeleteOneID(id int) *CloudHostDeleteOne {
	builder := c.Delete().Where(cloudhost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CloudHostDeleteOne{builder}
}

// Query returns a query builder for CloudHost.
func (c *CloudHostClient) Query() *CloudHostQuery {
	return &CloudHostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCloudHost},
		inters: c.Interceptors(),
	}
}

// Get returns a CloudHost entity by its id.
func (c *CloudHostClient) Get(ctx context.Context, id int) (*CloudHost, error) {
	return c.Query().Where(cloudhost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CloudHostClient) GetX(ctx context.Context, id int) *CloudHost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CloudHostClient) Hooks() []Hook {
	return c.hooks.CloudHost
}

// Interceptors returns the client interceptors.
func (c *CloudHostClient) Interceptors() []Interceptor {
	return c.inters.CloudHost
}

func (c *CloudHostClient) mutate(ctx context.Context, m *CloudHostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CloudHostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CloudHostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CloudHostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CloudHostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CloudHost mutation op: %q", m.Op())
	}
}

// ClusterClient is a client for the Cluster schema.
type ClusterClient struct {
	config
}

// NewClusterClient returns a client for the Cluster from the given config.
func NewClusterClient(c config) *ClusterClient {
	return &ClusterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cluster.Hooks(f(g(h())))`.
func (c *ClusterClient) Use(hooks ...Hook) {
	c.hooks.Cluster = append(c.hooks.Cluster, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cluster.Intercept(f(g(h())))`.
func (c *ClusterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cluster = append(c.inters.Cluster, interceptors...)
}

// Create returns a builder for creating a Cluster entity.
func (c *ClusterClient) Create() *ClusterCreate {
	mutation := newClusterMutation(c.config, OpCreate)
	return &ClusterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cluster entities.
func (c *ClusterClient) CreateBulk(builders ...*ClusterCreate) *ClusterCreateBulk {
	return &ClusterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cluster.
func (c *ClusterClient) Update() *ClusterUpdate {
	mutation := newClusterMutation(c.config, OpUpdate)
	return &ClusterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClusterClient) UpdateOne(cl *Cluster) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withCluster(cl))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClusterClient) UpdateOneID(id int) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withClusterID(id))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cluster.
func (c *ClusterClient) Delete() *ClusterDelete {
	mutation := newClusterMutation(c.config, OpDelete)
	return &ClusterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClusterClient) DeleteOne(cl *Cluster) *ClusterDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClusterClient) DeleteOneID(id int) *ClusterDeleteOne {
	builder := c.Delete().Where(cluster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClusterDeleteOne{builder}
}

// Query returns a query builder for Cluster.
func (c *ClusterClient) Query() *ClusterQuery {
	return &ClusterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCluster},
		inters: c.Interceptors(),
	}
}

// Get returns a Cluster entity by its id.
func (c *ClusterClient) Get(ctx context.Context, id int) (*Cluster, error) {
	return c.Query().Where(cluster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClusterClient) GetX(ctx context.Context, id int) *Cluster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ClusterClient) Hooks() []Hook {
	return c.hooks.Cluster
}

// Interceptors returns the client interceptors.
func (c *ClusterClient) Interceptors() []Interceptor {
	return c.inters.Cluster
}

func (c *ClusterClient) mutate(ctx context.Context, m *ClusterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClusterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClusterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClusterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cluster mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CloudHost, Cluster, User []ent.Hook
	}
	inters struct {
		CloudHost, Cluster, User []ent.Interceptor
	}
)
