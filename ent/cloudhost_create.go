// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit/ent/cloudhost"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CloudHostCreate is the builder for creating a CloudHost entity.
type CloudHostCreate struct {
	config
	mutation *CloudHostMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (chc *CloudHostCreate) SetUUID(s string) *CloudHostCreate {
	chc.mutation.SetUUID(s)
	return chc
}

// SetState sets the "state" field.
func (chc *CloudHostCreate) SetState(s string) *CloudHostCreate {
	chc.mutation.SetState(s)
	return chc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (chc *CloudHostCreate) SetNillableState(s *string) *CloudHostCreate {
	if s != nil {
		chc.SetState(*s)
	}
	return chc
}

// SetIpv6AddressPrivate sets the "ipv6AddressPrivate" field.
func (chc *CloudHostCreate) SetIpv6AddressPrivate(s string) *CloudHostCreate {
	chc.mutation.SetIpv6AddressPrivate(s)
	return chc
}

// SetIpv6AddressPublic sets the "ipv6AddressPublic" field.
func (chc *CloudHostCreate) SetIpv6AddressPublic(s string) *CloudHostCreate {
	chc.mutation.SetIpv6AddressPublic(s)
	return chc
}

// SetIpv4AddressPrivate sets the "ipv4AddressPrivate" field.
func (chc *CloudHostCreate) SetIpv4AddressPrivate(s string) *CloudHostCreate {
	chc.mutation.SetIpv4AddressPrivate(s)
	return chc
}

// SetIpv4AddressPublic sets the "ipv4AddressPublic" field.
func (chc *CloudHostCreate) SetIpv4AddressPublic(s string) *CloudHostCreate {
	chc.mutation.SetIpv4AddressPublic(s)
	return chc
}

// SetMemory sets the "memory" field.
func (chc *CloudHostCreate) SetMemory(i int) *CloudHostCreate {
	chc.mutation.SetMemory(i)
	return chc
}

// SetCPU sets the "cpu" field.
func (chc *CloudHostCreate) SetCPU(i int) *CloudHostCreate {
	chc.mutation.SetCPU(i)
	return chc
}

// SetCreatedTime sets the "createdTime" field.
func (chc *CloudHostCreate) SetCreatedTime(t time.Time) *CloudHostCreate {
	chc.mutation.SetCreatedTime(t)
	return chc
}

// SetExpiredTime sets the "expiredTime" field.
func (chc *CloudHostCreate) SetExpiredTime(t time.Time) *CloudHostCreate {
	chc.mutation.SetExpiredTime(t)
	return chc
}

// SetInstanceName sets the "instanceName" field.
func (chc *CloudHostCreate) SetInstanceName(s string) *CloudHostCreate {
	chc.mutation.SetInstanceName(s)
	return chc
}

// SetImageName sets the "imageName" field.
func (chc *CloudHostCreate) SetImageName(s string) *CloudHostCreate {
	chc.mutation.SetImageName(s)
	return chc
}

// SetOsType sets the "osType" field.
func (chc *CloudHostCreate) SetOsType(s string) *CloudHostCreate {
	chc.mutation.SetOsType(s)
	return chc
}

// SetManufacturer sets the "manufacturer" field.
func (chc *CloudHostCreate) SetManufacturer(s string) *CloudHostCreate {
	chc.mutation.SetManufacturer(s)
	return chc
}

// SetZone sets the "zone" field.
func (chc *CloudHostCreate) SetZone(s string) *CloudHostCreate {
	chc.mutation.SetZone(s)
	return chc
}

// SetSecurityGroups sets the "securityGroups" field.
func (chc *CloudHostCreate) SetSecurityGroups(s string) *CloudHostCreate {
	chc.mutation.SetSecurityGroups(s)
	return chc
}

// SetBillType sets the "billType" field.
func (chc *CloudHostCreate) SetBillType(s string) *CloudHostCreate {
	chc.mutation.SetBillType(s)
	return chc
}

// SetChargeType sets the "chargeType" field.
func (chc *CloudHostCreate) SetChargeType(s string) *CloudHostCreate {
	chc.mutation.SetChargeType(s)
	return chc
}

// SetIsActive sets the "isActive" field.
func (chc *CloudHostCreate) SetIsActive(b bool) *CloudHostCreate {
	chc.mutation.SetIsActive(b)
	return chc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (chc *CloudHostCreate) SetNillableIsActive(b *bool) *CloudHostCreate {
	if b != nil {
		chc.SetIsActive(*b)
	}
	return chc
}

// SetInstanceType sets the "instanceType" field.
func (chc *CloudHostCreate) SetInstanceType(s string) *CloudHostCreate {
	chc.mutation.SetInstanceType(s)
	return chc
}

// Mutation returns the CloudHostMutation object of the builder.
func (chc *CloudHostCreate) Mutation() *CloudHostMutation {
	return chc.mutation
}

// Save creates the CloudHost in the database.
func (chc *CloudHostCreate) Save(ctx context.Context) (*CloudHost, error) {
	chc.defaults()
	return withHooks(ctx, chc.sqlSave, chc.mutation, chc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (chc *CloudHostCreate) SaveX(ctx context.Context) *CloudHost {
	v, err := chc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chc *CloudHostCreate) Exec(ctx context.Context) error {
	_, err := chc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chc *CloudHostCreate) ExecX(ctx context.Context) {
	if err := chc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chc *CloudHostCreate) defaults() {
	if _, ok := chc.mutation.State(); !ok {
		v := cloudhost.DefaultState
		chc.mutation.SetState(v)
	}
	if _, ok := chc.mutation.IsActive(); !ok {
		v := cloudhost.DefaultIsActive
		chc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chc *CloudHostCreate) check() error {
	if _, ok := chc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "CloudHost.uuid"`)}
	}
	if v, ok := chc.mutation.UUID(); ok {
		if err := cloudhost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "CloudHost.uuid": %w`, err)}
		}
	}
	if _, ok := chc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CloudHost.state"`)}
	}
	if v, ok := chc.mutation.State(); ok {
		if err := cloudhost.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CloudHost.state": %w`, err)}
		}
	}
	if _, ok := chc.mutation.Ipv6AddressPrivate(); !ok {
		return &ValidationError{Name: "ipv6AddressPrivate", err: errors.New(`ent: missing required field "CloudHost.ipv6AddressPrivate"`)}
	}
	if _, ok := chc.mutation.Ipv6AddressPublic(); !ok {
		return &ValidationError{Name: "ipv6AddressPublic", err: errors.New(`ent: missing required field "CloudHost.ipv6AddressPublic"`)}
	}
	if _, ok := chc.mutation.Ipv4AddressPrivate(); !ok {
		return &ValidationError{Name: "ipv4AddressPrivate", err: errors.New(`ent: missing required field "CloudHost.ipv4AddressPrivate"`)}
	}
	if _, ok := chc.mutation.Ipv4AddressPublic(); !ok {
		return &ValidationError{Name: "ipv4AddressPublic", err: errors.New(`ent: missing required field "CloudHost.ipv4AddressPublic"`)}
	}
	if _, ok := chc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "CloudHost.memory"`)}
	}
	if _, ok := chc.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`ent: missing required field "CloudHost.cpu"`)}
	}
	if _, ok := chc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "createdTime", err: errors.New(`ent: missing required field "CloudHost.createdTime"`)}
	}
	if _, ok := chc.mutation.ExpiredTime(); !ok {
		return &ValidationError{Name: "expiredTime", err: errors.New(`ent: missing required field "CloudHost.expiredTime"`)}
	}
	if _, ok := chc.mutation.InstanceName(); !ok {
		return &ValidationError{Name: "instanceName", err: errors.New(`ent: missing required field "CloudHost.instanceName"`)}
	}
	if _, ok := chc.mutation.ImageName(); !ok {
		return &ValidationError{Name: "imageName", err: errors.New(`ent: missing required field "CloudHost.imageName"`)}
	}
	if _, ok := chc.mutation.OsType(); !ok {
		return &ValidationError{Name: "osType", err: errors.New(`ent: missing required field "CloudHost.osType"`)}
	}
	if _, ok := chc.mutation.Manufacturer(); !ok {
		return &ValidationError{Name: "manufacturer", err: errors.New(`ent: missing required field "CloudHost.manufacturer"`)}
	}
	if _, ok := chc.mutation.Zone(); !ok {
		return &ValidationError{Name: "zone", err: errors.New(`ent: missing required field "CloudHost.zone"`)}
	}
	if _, ok := chc.mutation.SecurityGroups(); !ok {
		return &ValidationError{Name: "securityGroups", err: errors.New(`ent: missing required field "CloudHost.securityGroups"`)}
	}
	if _, ok := chc.mutation.BillType(); !ok {
		return &ValidationError{Name: "billType", err: errors.New(`ent: missing required field "CloudHost.billType"`)}
	}
	if _, ok := chc.mutation.ChargeType(); !ok {
		return &ValidationError{Name: "chargeType", err: errors.New(`ent: missing required field "CloudHost.chargeType"`)}
	}
	if _, ok := chc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "isActive", err: errors.New(`ent: missing required field "CloudHost.isActive"`)}
	}
	if _, ok := chc.mutation.InstanceType(); !ok {
		return &ValidationError{Name: "instanceType", err: errors.New(`ent: missing required field "CloudHost.instanceType"`)}
	}
	return nil
}

func (chc *CloudHostCreate) sqlSave(ctx context.Context) (*CloudHost, error) {
	if err := chc.check(); err != nil {
		return nil, err
	}
	_node, _spec := chc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	chc.mutation.id = &_node.ID
	chc.mutation.done = true
	return _node, nil
}

func (chc *CloudHostCreate) createSpec() (*CloudHost, *sqlgraph.CreateSpec) {
	var (
		_node = &CloudHost{config: chc.config}
		_spec = sqlgraph.NewCreateSpec(cloudhost.Table, sqlgraph.NewFieldSpec(cloudhost.FieldID, field.TypeInt))
	)
	if value, ok := chc.mutation.UUID(); ok {
		_spec.SetField(cloudhost.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := chc.mutation.State(); ok {
		_spec.SetField(cloudhost.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := chc.mutation.Ipv6AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPrivate, field.TypeString, value)
		_node.Ipv6AddressPrivate = value
	}
	if value, ok := chc.mutation.Ipv6AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPublic, field.TypeString, value)
		_node.Ipv6AddressPublic = value
	}
	if value, ok := chc.mutation.Ipv4AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPrivate, field.TypeString, value)
		_node.Ipv4AddressPrivate = value
	}
	if value, ok := chc.mutation.Ipv4AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPublic, field.TypeString, value)
		_node.Ipv4AddressPublic = value
	}
	if value, ok := chc.mutation.Memory(); ok {
		_spec.SetField(cloudhost.FieldMemory, field.TypeInt, value)
		_node.Memory = value
	}
	if value, ok := chc.mutation.CPU(); ok {
		_spec.SetField(cloudhost.FieldCPU, field.TypeInt, value)
		_node.CPU = value
	}
	if value, ok := chc.mutation.CreatedTime(); ok {
		_spec.SetField(cloudhost.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := chc.mutation.ExpiredTime(); ok {
		_spec.SetField(cloudhost.FieldExpiredTime, field.TypeTime, value)
		_node.ExpiredTime = value
	}
	if value, ok := chc.mutation.InstanceName(); ok {
		_spec.SetField(cloudhost.FieldInstanceName, field.TypeString, value)
		_node.InstanceName = value
	}
	if value, ok := chc.mutation.ImageName(); ok {
		_spec.SetField(cloudhost.FieldImageName, field.TypeString, value)
		_node.ImageName = value
	}
	if value, ok := chc.mutation.OsType(); ok {
		_spec.SetField(cloudhost.FieldOsType, field.TypeString, value)
		_node.OsType = value
	}
	if value, ok := chc.mutation.Manufacturer(); ok {
		_spec.SetField(cloudhost.FieldManufacturer, field.TypeString, value)
		_node.Manufacturer = value
	}
	if value, ok := chc.mutation.Zone(); ok {
		_spec.SetField(cloudhost.FieldZone, field.TypeString, value)
		_node.Zone = value
	}
	if value, ok := chc.mutation.SecurityGroups(); ok {
		_spec.SetField(cloudhost.FieldSecurityGroups, field.TypeString, value)
		_node.SecurityGroups = value
	}
	if value, ok := chc.mutation.BillType(); ok {
		_spec.SetField(cloudhost.FieldBillType, field.TypeString, value)
		_node.BillType = value
	}
	if value, ok := chc.mutation.ChargeType(); ok {
		_spec.SetField(cloudhost.FieldChargeType, field.TypeString, value)
		_node.ChargeType = value
	}
	if value, ok := chc.mutation.IsActive(); ok {
		_spec.SetField(cloudhost.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := chc.mutation.InstanceType(); ok {
		_spec.SetField(cloudhost.FieldInstanceType, field.TypeString, value)
		_node.InstanceType = value
	}
	return _node, _spec
}

// CloudHostCreateBulk is the builder for creating many CloudHost entities in bulk.
type CloudHostCreateBulk struct {
	config
	builders []*CloudHostCreate
}

// Save creates the CloudHost entities in the database.
func (chcb *CloudHostCreateBulk) Save(ctx context.Context) ([]*CloudHost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(chcb.builders))
	nodes := make([]*CloudHost, len(chcb.builders))
	mutators := make([]Mutator, len(chcb.builders))
	for i := range chcb.builders {
		func(i int, root context.Context) {
			builder := chcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CloudHostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chcb *CloudHostCreateBulk) SaveX(ctx context.Context) []*CloudHost {
	v, err := chcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcb *CloudHostCreateBulk) Exec(ctx context.Context) error {
	_, err := chcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcb *CloudHostCreateBulk) ExecX(ctx context.Context) {
	if err := chcb.Exec(ctx); err != nil {
		panic(err)
	}
}
