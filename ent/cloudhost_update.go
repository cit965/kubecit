// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit/ent/cloudhost"
	"kubecit/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CloudHostUpdate is the builder for updating CloudHost entities.
type CloudHostUpdate struct {
	config
	hooks    []Hook
	mutation *CloudHostMutation
}

// Where appends a list predicates to the CloudHostUpdate builder.
func (chu *CloudHostUpdate) Where(ps ...predicate.CloudHost) *CloudHostUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetUUID sets the "uuid" field.
func (chu *CloudHostUpdate) SetUUID(s string) *CloudHostUpdate {
	chu.mutation.SetUUID(s)
	return chu
}

// SetState sets the "state" field.
func (chu *CloudHostUpdate) SetState(s string) *CloudHostUpdate {
	chu.mutation.SetState(s)
	return chu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (chu *CloudHostUpdate) SetNillableState(s *string) *CloudHostUpdate {
	if s != nil {
		chu.SetState(*s)
	}
	return chu
}

// SetIpv6AddressPrivate sets the "ipv6AddressPrivate" field.
func (chu *CloudHostUpdate) SetIpv6AddressPrivate(s string) *CloudHostUpdate {
	chu.mutation.SetIpv6AddressPrivate(s)
	return chu
}

// SetIpv6AddressPublic sets the "ipv6AddressPublic" field.
func (chu *CloudHostUpdate) SetIpv6AddressPublic(s string) *CloudHostUpdate {
	chu.mutation.SetIpv6AddressPublic(s)
	return chu
}

// SetIpv4AddressPrivate sets the "ipv4AddressPrivate" field.
func (chu *CloudHostUpdate) SetIpv4AddressPrivate(s string) *CloudHostUpdate {
	chu.mutation.SetIpv4AddressPrivate(s)
	return chu
}

// SetIpv4AddressPublic sets the "ipv4AddressPublic" field.
func (chu *CloudHostUpdate) SetIpv4AddressPublic(s string) *CloudHostUpdate {
	chu.mutation.SetIpv4AddressPublic(s)
	return chu
}

// SetMemory sets the "memory" field.
func (chu *CloudHostUpdate) SetMemory(i int) *CloudHostUpdate {
	chu.mutation.ResetMemory()
	chu.mutation.SetMemory(i)
	return chu
}

// AddMemory adds i to the "memory" field.
func (chu *CloudHostUpdate) AddMemory(i int) *CloudHostUpdate {
	chu.mutation.AddMemory(i)
	return chu
}

// SetCPU sets the "cpu" field.
func (chu *CloudHostUpdate) SetCPU(i int) *CloudHostUpdate {
	chu.mutation.ResetCPU()
	chu.mutation.SetCPU(i)
	return chu
}

// AddCPU adds i to the "cpu" field.
func (chu *CloudHostUpdate) AddCPU(i int) *CloudHostUpdate {
	chu.mutation.AddCPU(i)
	return chu
}

// SetCreatedTime sets the "createdTime" field.
func (chu *CloudHostUpdate) SetCreatedTime(t time.Time) *CloudHostUpdate {
	chu.mutation.SetCreatedTime(t)
	return chu
}

// SetExpiredTime sets the "expiredTime" field.
func (chu *CloudHostUpdate) SetExpiredTime(t time.Time) *CloudHostUpdate {
	chu.mutation.SetExpiredTime(t)
	return chu
}

// SetInstanceName sets the "instanceName" field.
func (chu *CloudHostUpdate) SetInstanceName(s string) *CloudHostUpdate {
	chu.mutation.SetInstanceName(s)
	return chu
}

// SetImageName sets the "imageName" field.
func (chu *CloudHostUpdate) SetImageName(s string) *CloudHostUpdate {
	chu.mutation.SetImageName(s)
	return chu
}

// SetOsType sets the "osType" field.
func (chu *CloudHostUpdate) SetOsType(s string) *CloudHostUpdate {
	chu.mutation.SetOsType(s)
	return chu
}

// SetManufacturer sets the "manufacturer" field.
func (chu *CloudHostUpdate) SetManufacturer(s string) *CloudHostUpdate {
	chu.mutation.SetManufacturer(s)
	return chu
}

// SetZone sets the "zone" field.
func (chu *CloudHostUpdate) SetZone(s string) *CloudHostUpdate {
	chu.mutation.SetZone(s)
	return chu
}

// SetSecurityGroups sets the "securityGroups" field.
func (chu *CloudHostUpdate) SetSecurityGroups(s string) *CloudHostUpdate {
	chu.mutation.SetSecurityGroups(s)
	return chu
}

// SetBillType sets the "billType" field.
func (chu *CloudHostUpdate) SetBillType(s string) *CloudHostUpdate {
	chu.mutation.SetBillType(s)
	return chu
}

// SetChargeType sets the "chargeType" field.
func (chu *CloudHostUpdate) SetChargeType(s string) *CloudHostUpdate {
	chu.mutation.SetChargeType(s)
	return chu
}

// SetIsActive sets the "isActive" field.
func (chu *CloudHostUpdate) SetIsActive(b bool) *CloudHostUpdate {
	chu.mutation.SetIsActive(b)
	return chu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (chu *CloudHostUpdate) SetNillableIsActive(b *bool) *CloudHostUpdate {
	if b != nil {
		chu.SetIsActive(*b)
	}
	return chu
}

// SetInstanceType sets the "instanceType" field.
func (chu *CloudHostUpdate) SetInstanceType(s string) *CloudHostUpdate {
	chu.mutation.SetInstanceType(s)
	return chu
}

// Mutation returns the CloudHostMutation object of the builder.
func (chu *CloudHostUpdate) Mutation() *CloudHostMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *CloudHostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *CloudHostUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *CloudHostUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *CloudHostUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chu *CloudHostUpdate) check() error {
	if v, ok := chu.mutation.UUID(); ok {
		if err := cloudhost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "CloudHost.uuid": %w`, err)}
		}
	}
	if v, ok := chu.mutation.State(); ok {
		if err := cloudhost.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CloudHost.state": %w`, err)}
		}
	}
	return nil
}

func (chu *CloudHostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := chu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudhost.Table, cloudhost.Columns, sqlgraph.NewFieldSpec(cloudhost.FieldID, field.TypeInt))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chu.mutation.UUID(); ok {
		_spec.SetField(cloudhost.FieldUUID, field.TypeString, value)
	}
	if value, ok := chu.mutation.State(); ok {
		_spec.SetField(cloudhost.FieldState, field.TypeString, value)
	}
	if value, ok := chu.mutation.Ipv6AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPrivate, field.TypeString, value)
	}
	if value, ok := chu.mutation.Ipv6AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPublic, field.TypeString, value)
	}
	if value, ok := chu.mutation.Ipv4AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPrivate, field.TypeString, value)
	}
	if value, ok := chu.mutation.Ipv4AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPublic, field.TypeString, value)
	}
	if value, ok := chu.mutation.Memory(); ok {
		_spec.SetField(cloudhost.FieldMemory, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedMemory(); ok {
		_spec.AddField(cloudhost.FieldMemory, field.TypeInt, value)
	}
	if value, ok := chu.mutation.CPU(); ok {
		_spec.SetField(cloudhost.FieldCPU, field.TypeInt, value)
	}
	if value, ok := chu.mutation.AddedCPU(); ok {
		_spec.AddField(cloudhost.FieldCPU, field.TypeInt, value)
	}
	if value, ok := chu.mutation.CreatedTime(); ok {
		_spec.SetField(cloudhost.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := chu.mutation.ExpiredTime(); ok {
		_spec.SetField(cloudhost.FieldExpiredTime, field.TypeTime, value)
	}
	if value, ok := chu.mutation.InstanceName(); ok {
		_spec.SetField(cloudhost.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := chu.mutation.ImageName(); ok {
		_spec.SetField(cloudhost.FieldImageName, field.TypeString, value)
	}
	if value, ok := chu.mutation.OsType(); ok {
		_spec.SetField(cloudhost.FieldOsType, field.TypeString, value)
	}
	if value, ok := chu.mutation.Manufacturer(); ok {
		_spec.SetField(cloudhost.FieldManufacturer, field.TypeString, value)
	}
	if value, ok := chu.mutation.Zone(); ok {
		_spec.SetField(cloudhost.FieldZone, field.TypeString, value)
	}
	if value, ok := chu.mutation.SecurityGroups(); ok {
		_spec.SetField(cloudhost.FieldSecurityGroups, field.TypeString, value)
	}
	if value, ok := chu.mutation.BillType(); ok {
		_spec.SetField(cloudhost.FieldBillType, field.TypeString, value)
	}
	if value, ok := chu.mutation.ChargeType(); ok {
		_spec.SetField(cloudhost.FieldChargeType, field.TypeString, value)
	}
	if value, ok := chu.mutation.IsActive(); ok {
		_spec.SetField(cloudhost.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := chu.mutation.InstanceType(); ok {
		_spec.SetField(cloudhost.FieldInstanceType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudhost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// CloudHostUpdateOne is the builder for updating a single CloudHost entity.
type CloudHostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CloudHostMutation
}

// SetUUID sets the "uuid" field.
func (chuo *CloudHostUpdateOne) SetUUID(s string) *CloudHostUpdateOne {
	chuo.mutation.SetUUID(s)
	return chuo
}

// SetState sets the "state" field.
func (chuo *CloudHostUpdateOne) SetState(s string) *CloudHostUpdateOne {
	chuo.mutation.SetState(s)
	return chuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (chuo *CloudHostUpdateOne) SetNillableState(s *string) *CloudHostUpdateOne {
	if s != nil {
		chuo.SetState(*s)
	}
	return chuo
}

// SetIpv6AddressPrivate sets the "ipv6AddressPrivate" field.
func (chuo *CloudHostUpdateOne) SetIpv6AddressPrivate(s string) *CloudHostUpdateOne {
	chuo.mutation.SetIpv6AddressPrivate(s)
	return chuo
}

// SetIpv6AddressPublic sets the "ipv6AddressPublic" field.
func (chuo *CloudHostUpdateOne) SetIpv6AddressPublic(s string) *CloudHostUpdateOne {
	chuo.mutation.SetIpv6AddressPublic(s)
	return chuo
}

// SetIpv4AddressPrivate sets the "ipv4AddressPrivate" field.
func (chuo *CloudHostUpdateOne) SetIpv4AddressPrivate(s string) *CloudHostUpdateOne {
	chuo.mutation.SetIpv4AddressPrivate(s)
	return chuo
}

// SetIpv4AddressPublic sets the "ipv4AddressPublic" field.
func (chuo *CloudHostUpdateOne) SetIpv4AddressPublic(s string) *CloudHostUpdateOne {
	chuo.mutation.SetIpv4AddressPublic(s)
	return chuo
}

// SetMemory sets the "memory" field.
func (chuo *CloudHostUpdateOne) SetMemory(i int) *CloudHostUpdateOne {
	chuo.mutation.ResetMemory()
	chuo.mutation.SetMemory(i)
	return chuo
}

// AddMemory adds i to the "memory" field.
func (chuo *CloudHostUpdateOne) AddMemory(i int) *CloudHostUpdateOne {
	chuo.mutation.AddMemory(i)
	return chuo
}

// SetCPU sets the "cpu" field.
func (chuo *CloudHostUpdateOne) SetCPU(i int) *CloudHostUpdateOne {
	chuo.mutation.ResetCPU()
	chuo.mutation.SetCPU(i)
	return chuo
}

// AddCPU adds i to the "cpu" field.
func (chuo *CloudHostUpdateOne) AddCPU(i int) *CloudHostUpdateOne {
	chuo.mutation.AddCPU(i)
	return chuo
}

// SetCreatedTime sets the "createdTime" field.
func (chuo *CloudHostUpdateOne) SetCreatedTime(t time.Time) *CloudHostUpdateOne {
	chuo.mutation.SetCreatedTime(t)
	return chuo
}

// SetExpiredTime sets the "expiredTime" field.
func (chuo *CloudHostUpdateOne) SetExpiredTime(t time.Time) *CloudHostUpdateOne {
	chuo.mutation.SetExpiredTime(t)
	return chuo
}

// SetInstanceName sets the "instanceName" field.
func (chuo *CloudHostUpdateOne) SetInstanceName(s string) *CloudHostUpdateOne {
	chuo.mutation.SetInstanceName(s)
	return chuo
}

// SetImageName sets the "imageName" field.
func (chuo *CloudHostUpdateOne) SetImageName(s string) *CloudHostUpdateOne {
	chuo.mutation.SetImageName(s)
	return chuo
}

// SetOsType sets the "osType" field.
func (chuo *CloudHostUpdateOne) SetOsType(s string) *CloudHostUpdateOne {
	chuo.mutation.SetOsType(s)
	return chuo
}

// SetManufacturer sets the "manufacturer" field.
func (chuo *CloudHostUpdateOne) SetManufacturer(s string) *CloudHostUpdateOne {
	chuo.mutation.SetManufacturer(s)
	return chuo
}

// SetZone sets the "zone" field.
func (chuo *CloudHostUpdateOne) SetZone(s string) *CloudHostUpdateOne {
	chuo.mutation.SetZone(s)
	return chuo
}

// SetSecurityGroups sets the "securityGroups" field.
func (chuo *CloudHostUpdateOne) SetSecurityGroups(s string) *CloudHostUpdateOne {
	chuo.mutation.SetSecurityGroups(s)
	return chuo
}

// SetBillType sets the "billType" field.
func (chuo *CloudHostUpdateOne) SetBillType(s string) *CloudHostUpdateOne {
	chuo.mutation.SetBillType(s)
	return chuo
}

// SetChargeType sets the "chargeType" field.
func (chuo *CloudHostUpdateOne) SetChargeType(s string) *CloudHostUpdateOne {
	chuo.mutation.SetChargeType(s)
	return chuo
}

// SetIsActive sets the "isActive" field.
func (chuo *CloudHostUpdateOne) SetIsActive(b bool) *CloudHostUpdateOne {
	chuo.mutation.SetIsActive(b)
	return chuo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (chuo *CloudHostUpdateOne) SetNillableIsActive(b *bool) *CloudHostUpdateOne {
	if b != nil {
		chuo.SetIsActive(*b)
	}
	return chuo
}

// SetInstanceType sets the "instanceType" field.
func (chuo *CloudHostUpdateOne) SetInstanceType(s string) *CloudHostUpdateOne {
	chuo.mutation.SetInstanceType(s)
	return chuo
}

// Mutation returns the CloudHostMutation object of the builder.
func (chuo *CloudHostUpdateOne) Mutation() *CloudHostMutation {
	return chuo.mutation
}

// Where appends a list predicates to the CloudHostUpdate builder.
func (chuo *CloudHostUpdateOne) Where(ps ...predicate.CloudHost) *CloudHostUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *CloudHostUpdateOne) Select(field string, fields ...string) *CloudHostUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated CloudHost entity.
func (chuo *CloudHostUpdateOne) Save(ctx context.Context) (*CloudHost, error) {
	return withHooks(ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *CloudHostUpdateOne) SaveX(ctx context.Context) *CloudHost {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *CloudHostUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *CloudHostUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (chuo *CloudHostUpdateOne) check() error {
	if v, ok := chuo.mutation.UUID(); ok {
		if err := cloudhost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "CloudHost.uuid": %w`, err)}
		}
	}
	if v, ok := chuo.mutation.State(); ok {
		if err := cloudhost.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CloudHost.state": %w`, err)}
		}
	}
	return nil
}

func (chuo *CloudHostUpdateOne) sqlSave(ctx context.Context) (_node *CloudHost, err error) {
	if err := chuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cloudhost.Table, cloudhost.Columns, sqlgraph.NewFieldSpec(cloudhost.FieldID, field.TypeInt))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CloudHost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cloudhost.FieldID)
		for _, f := range fields {
			if !cloudhost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cloudhost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := chuo.mutation.UUID(); ok {
		_spec.SetField(cloudhost.FieldUUID, field.TypeString, value)
	}
	if value, ok := chuo.mutation.State(); ok {
		_spec.SetField(cloudhost.FieldState, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Ipv6AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPrivate, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Ipv6AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv6AddressPublic, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Ipv4AddressPrivate(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPrivate, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Ipv4AddressPublic(); ok {
		_spec.SetField(cloudhost.FieldIpv4AddressPublic, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Memory(); ok {
		_spec.SetField(cloudhost.FieldMemory, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedMemory(); ok {
		_spec.AddField(cloudhost.FieldMemory, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.CPU(); ok {
		_spec.SetField(cloudhost.FieldCPU, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.AddedCPU(); ok {
		_spec.AddField(cloudhost.FieldCPU, field.TypeInt, value)
	}
	if value, ok := chuo.mutation.CreatedTime(); ok {
		_spec.SetField(cloudhost.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := chuo.mutation.ExpiredTime(); ok {
		_spec.SetField(cloudhost.FieldExpiredTime, field.TypeTime, value)
	}
	if value, ok := chuo.mutation.InstanceName(); ok {
		_spec.SetField(cloudhost.FieldInstanceName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.ImageName(); ok {
		_spec.SetField(cloudhost.FieldImageName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.OsType(); ok {
		_spec.SetField(cloudhost.FieldOsType, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Manufacturer(); ok {
		_spec.SetField(cloudhost.FieldManufacturer, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Zone(); ok {
		_spec.SetField(cloudhost.FieldZone, field.TypeString, value)
	}
	if value, ok := chuo.mutation.SecurityGroups(); ok {
		_spec.SetField(cloudhost.FieldSecurityGroups, field.TypeString, value)
	}
	if value, ok := chuo.mutation.BillType(); ok {
		_spec.SetField(cloudhost.FieldBillType, field.TypeString, value)
	}
	if value, ok := chuo.mutation.ChargeType(); ok {
		_spec.SetField(cloudhost.FieldChargeType, field.TypeString, value)
	}
	if value, ok := chuo.mutation.IsActive(); ok {
		_spec.SetField(cloudhost.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := chuo.mutation.InstanceType(); ok {
		_spec.SetField(cloudhost.FieldInstanceType, field.TypeString, value)
	}
	_node = &CloudHost{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cloudhost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
