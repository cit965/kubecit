// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit/ent/cloudprovider"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CloudProviderCreate is the builder for creating a CloudProvider entity.
type CloudProviderCreate struct {
	config
	mutation *CloudProviderMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (cpc *CloudProviderCreate) SetKey(s string) *CloudProviderCreate {
	cpc.mutation.SetKey(s)
	return cpc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cpc *CloudProviderCreate) SetNillableKey(s *string) *CloudProviderCreate {
	if s != nil {
		cpc.SetKey(*s)
	}
	return cpc
}

// SetSecret sets the "secret" field.
func (cpc *CloudProviderCreate) SetSecret(s string) *CloudProviderCreate {
	cpc.mutation.SetSecret(s)
	return cpc
}

// SetType sets the "type" field.
func (cpc *CloudProviderCreate) SetType(i int64) *CloudProviderCreate {
	cpc.mutation.SetType(i)
	return cpc
}

// SetName sets the "name" field.
func (cpc *CloudProviderCreate) SetName(s string) *CloudProviderCreate {
	cpc.mutation.SetName(s)
	return cpc
}

// Mutation returns the CloudProviderMutation object of the builder.
func (cpc *CloudProviderCreate) Mutation() *CloudProviderMutation {
	return cpc.mutation
}

// Save creates the CloudProvider in the database.
func (cpc *CloudProviderCreate) Save(ctx context.Context) (*CloudProvider, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CloudProviderCreate) SaveX(ctx context.Context) *CloudProvider {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CloudProviderCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CloudProviderCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CloudProviderCreate) defaults() {
	if _, ok := cpc.mutation.Key(); !ok {
		v := cloudprovider.DefaultKey
		cpc.mutation.SetKey(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CloudProviderCreate) check() error {
	if _, ok := cpc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "CloudProvider.key"`)}
	}
	if _, ok := cpc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "CloudProvider.secret"`)}
	}
	if _, ok := cpc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CloudProvider.type"`)}
	}
	if _, ok := cpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CloudProvider.name"`)}
	}
	return nil
}

func (cpc *CloudProviderCreate) sqlSave(ctx context.Context) (*CloudProvider, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CloudProviderCreate) createSpec() (*CloudProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &CloudProvider{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(cloudprovider.Table, sqlgraph.NewFieldSpec(cloudprovider.FieldID, field.TypeInt))
	)
	if value, ok := cpc.mutation.Key(); ok {
		_spec.SetField(cloudprovider.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cpc.mutation.Secret(); ok {
		_spec.SetField(cloudprovider.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := cpc.mutation.GetType(); ok {
		_spec.SetField(cloudprovider.FieldType, field.TypeInt64, value)
		_node.Type = value
	}
	if value, ok := cpc.mutation.Name(); ok {
		_spec.SetField(cloudprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// CloudProviderCreateBulk is the builder for creating many CloudProvider entities in bulk.
type CloudProviderCreateBulk struct {
	config
	builders []*CloudProviderCreate
}

// Save creates the CloudProvider entities in the database.
func (cpcb *CloudProviderCreateBulk) Save(ctx context.Context) ([]*CloudProvider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CloudProvider, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CloudProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CloudProviderCreateBulk) SaveX(ctx context.Context) []*CloudProvider {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CloudProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CloudProviderCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
