// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit/ent/cloudhost"
	"kubecit/ent/cloudprovider"
	"kubecit/ent/cluster"
	"kubecit/ent/predicate"
	"kubecit/ent/user"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCloudHost     = "CloudHost"
	TypeCloudProvider = "CloudProvider"
	TypeCluster       = "Cluster"
	TypeUser          = "User"
)

// CloudHostMutation represents an operation that mutates the CloudHost nodes in the graph.
type CloudHostMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	instanceId          *string
	vpcId               *string
	subnetId            *string
	instanceName        *string
	instanceState       *string
	cpu                 *int64
	addcpu              *int64
	memory              *int64
	addmemory           *int64
	createdTime         *string
	instanceType        *string
	eniLimit            *int64
	addeniLimit         *int64
	enilpLimit          *int64
	addenilpLimit       *int64
	instanceEniCount    *int64
	addinstanceEniCount *int64
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*CloudHost, error)
	predicates          []predicate.CloudHost
}

var _ ent.Mutation = (*CloudHostMutation)(nil)

// cloudhostOption allows management of the mutation configuration using functional options.
type cloudhostOption func(*CloudHostMutation)

// newCloudHostMutation creates new mutation for the CloudHost entity.
func newCloudHostMutation(c config, op Op, opts ...cloudhostOption) *CloudHostMutation {
	m := &CloudHostMutation{
		config:        c,
		op:            op,
		typ:           TypeCloudHost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCloudHostID sets the ID field of the mutation.
func withCloudHostID(id int) cloudhostOption {
	return func(m *CloudHostMutation) {
		var (
			err   error
			once  sync.Once
			value *CloudHost
		)
		m.oldValue = func(ctx context.Context) (*CloudHost, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CloudHost.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCloudHost sets the old CloudHost of the mutation.
func withCloudHost(node *CloudHost) cloudhostOption {
	return func(m *CloudHostMutation) {
		m.oldValue = func(context.Context) (*CloudHost, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CloudHostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CloudHostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CloudHostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CloudHostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CloudHost.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInstanceId sets the "instanceId" field.
func (m *CloudHostMutation) SetInstanceId(s string) {
	m.instanceId = &s
}

// InstanceId returns the value of the "instanceId" field in the mutation.
func (m *CloudHostMutation) InstanceId() (r string, exists bool) {
	v := m.instanceId
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceId returns the old "instanceId" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldInstanceId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceId: %w", err)
	}
	return oldValue.InstanceId, nil
}

// ResetInstanceId resets all changes to the "instanceId" field.
func (m *CloudHostMutation) ResetInstanceId() {
	m.instanceId = nil
}

// SetVpcId sets the "vpcId" field.
func (m *CloudHostMutation) SetVpcId(s string) {
	m.vpcId = &s
}

// VpcId returns the value of the "vpcId" field in the mutation.
func (m *CloudHostMutation) VpcId() (r string, exists bool) {
	v := m.vpcId
	if v == nil {
		return
	}
	return *v, true
}

// OldVpcId returns the old "vpcId" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldVpcId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVpcId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVpcId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVpcId: %w", err)
	}
	return oldValue.VpcId, nil
}

// ResetVpcId resets all changes to the "vpcId" field.
func (m *CloudHostMutation) ResetVpcId() {
	m.vpcId = nil
}

// SetSubnetId sets the "subnetId" field.
func (m *CloudHostMutation) SetSubnetId(s string) {
	m.subnetId = &s
}

// SubnetId returns the value of the "subnetId" field in the mutation.
func (m *CloudHostMutation) SubnetId() (r string, exists bool) {
	v := m.subnetId
	if v == nil {
		return
	}
	return *v, true
}

// OldSubnetId returns the old "subnetId" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldSubnetId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubnetId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubnetId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubnetId: %w", err)
	}
	return oldValue.SubnetId, nil
}

// ResetSubnetId resets all changes to the "subnetId" field.
func (m *CloudHostMutation) ResetSubnetId() {
	m.subnetId = nil
}

// SetInstanceName sets the "instanceName" field.
func (m *CloudHostMutation) SetInstanceName(s string) {
	m.instanceName = &s
}

// InstanceName returns the value of the "instanceName" field in the mutation.
func (m *CloudHostMutation) InstanceName() (r string, exists bool) {
	v := m.instanceName
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceName returns the old "instanceName" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldInstanceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceName: %w", err)
	}
	return oldValue.InstanceName, nil
}

// ResetInstanceName resets all changes to the "instanceName" field.
func (m *CloudHostMutation) ResetInstanceName() {
	m.instanceName = nil
}

// SetInstanceState sets the "instanceState" field.
func (m *CloudHostMutation) SetInstanceState(s string) {
	m.instanceState = &s
}

// InstanceState returns the value of the "instanceState" field in the mutation.
func (m *CloudHostMutation) InstanceState() (r string, exists bool) {
	v := m.instanceState
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceState returns the old "instanceState" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldInstanceState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceState: %w", err)
	}
	return oldValue.InstanceState, nil
}

// ResetInstanceState resets all changes to the "instanceState" field.
func (m *CloudHostMutation) ResetInstanceState() {
	m.instanceState = nil
}

// SetCPU sets the "cpu" field.
func (m *CloudHostMutation) SetCPU(i int64) {
	m.cpu = &i
	m.addcpu = nil
}

// CPU returns the value of the "cpu" field in the mutation.
func (m *CloudHostMutation) CPU() (r int64, exists bool) {
	v := m.cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldCPU returns the old "cpu" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldCPU(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCPU: %w", err)
	}
	return oldValue.CPU, nil
}

// AddCPU adds i to the "cpu" field.
func (m *CloudHostMutation) AddCPU(i int64) {
	if m.addcpu != nil {
		*m.addcpu += i
	} else {
		m.addcpu = &i
	}
}

// AddedCPU returns the value that was added to the "cpu" field in this mutation.
func (m *CloudHostMutation) AddedCPU() (r int64, exists bool) {
	v := m.addcpu
	if v == nil {
		return
	}
	return *v, true
}

// ResetCPU resets all changes to the "cpu" field.
func (m *CloudHostMutation) ResetCPU() {
	m.cpu = nil
	m.addcpu = nil
}

// SetMemory sets the "memory" field.
func (m *CloudHostMutation) SetMemory(i int64) {
	m.memory = &i
	m.addmemory = nil
}

// Memory returns the value of the "memory" field in the mutation.
func (m *CloudHostMutation) Memory() (r int64, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldMemory(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// AddMemory adds i to the "memory" field.
func (m *CloudHostMutation) AddMemory(i int64) {
	if m.addmemory != nil {
		*m.addmemory += i
	} else {
		m.addmemory = &i
	}
}

// AddedMemory returns the value that was added to the "memory" field in this mutation.
func (m *CloudHostMutation) AddedMemory() (r int64, exists bool) {
	v := m.addmemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetMemory resets all changes to the "memory" field.
func (m *CloudHostMutation) ResetMemory() {
	m.memory = nil
	m.addmemory = nil
}

// SetCreatedTime sets the "createdTime" field.
func (m *CloudHostMutation) SetCreatedTime(s string) {
	m.createdTime = &s
}

// CreatedTime returns the value of the "createdTime" field in the mutation.
func (m *CloudHostMutation) CreatedTime() (r string, exists bool) {
	v := m.createdTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "createdTime" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldCreatedTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "createdTime" field.
func (m *CloudHostMutation) ResetCreatedTime() {
	m.createdTime = nil
}

// SetInstanceType sets the "instanceType" field.
func (m *CloudHostMutation) SetInstanceType(s string) {
	m.instanceType = &s
}

// InstanceType returns the value of the "instanceType" field in the mutation.
func (m *CloudHostMutation) InstanceType() (r string, exists bool) {
	v := m.instanceType
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceType returns the old "instanceType" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldInstanceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceType: %w", err)
	}
	return oldValue.InstanceType, nil
}

// ResetInstanceType resets all changes to the "instanceType" field.
func (m *CloudHostMutation) ResetInstanceType() {
	m.instanceType = nil
}

// SetEniLimit sets the "eniLimit" field.
func (m *CloudHostMutation) SetEniLimit(i int64) {
	m.eniLimit = &i
	m.addeniLimit = nil
}

// EniLimit returns the value of the "eniLimit" field in the mutation.
func (m *CloudHostMutation) EniLimit() (r int64, exists bool) {
	v := m.eniLimit
	if v == nil {
		return
	}
	return *v, true
}

// OldEniLimit returns the old "eniLimit" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldEniLimit(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEniLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEniLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEniLimit: %w", err)
	}
	return oldValue.EniLimit, nil
}

// AddEniLimit adds i to the "eniLimit" field.
func (m *CloudHostMutation) AddEniLimit(i int64) {
	if m.addeniLimit != nil {
		*m.addeniLimit += i
	} else {
		m.addeniLimit = &i
	}
}

// AddedEniLimit returns the value that was added to the "eniLimit" field in this mutation.
func (m *CloudHostMutation) AddedEniLimit() (r int64, exists bool) {
	v := m.addeniLimit
	if v == nil {
		return
	}
	return *v, true
}

// ResetEniLimit resets all changes to the "eniLimit" field.
func (m *CloudHostMutation) ResetEniLimit() {
	m.eniLimit = nil
	m.addeniLimit = nil
}

// SetEnilpLimit sets the "enilpLimit" field.
func (m *CloudHostMutation) SetEnilpLimit(i int64) {
	m.enilpLimit = &i
	m.addenilpLimit = nil
}

// EnilpLimit returns the value of the "enilpLimit" field in the mutation.
func (m *CloudHostMutation) EnilpLimit() (r int64, exists bool) {
	v := m.enilpLimit
	if v == nil {
		return
	}
	return *v, true
}

// OldEnilpLimit returns the old "enilpLimit" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldEnilpLimit(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnilpLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnilpLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnilpLimit: %w", err)
	}
	return oldValue.EnilpLimit, nil
}

// AddEnilpLimit adds i to the "enilpLimit" field.
func (m *CloudHostMutation) AddEnilpLimit(i int64) {
	if m.addenilpLimit != nil {
		*m.addenilpLimit += i
	} else {
		m.addenilpLimit = &i
	}
}

// AddedEnilpLimit returns the value that was added to the "enilpLimit" field in this mutation.
func (m *CloudHostMutation) AddedEnilpLimit() (r int64, exists bool) {
	v := m.addenilpLimit
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnilpLimit resets all changes to the "enilpLimit" field.
func (m *CloudHostMutation) ResetEnilpLimit() {
	m.enilpLimit = nil
	m.addenilpLimit = nil
}

// SetInstanceEniCount sets the "instanceEniCount" field.
func (m *CloudHostMutation) SetInstanceEniCount(i int64) {
	m.instanceEniCount = &i
	m.addinstanceEniCount = nil
}

// InstanceEniCount returns the value of the "instanceEniCount" field in the mutation.
func (m *CloudHostMutation) InstanceEniCount() (r int64, exists bool) {
	v := m.instanceEniCount
	if v == nil {
		return
	}
	return *v, true
}

// OldInstanceEniCount returns the old "instanceEniCount" field's value of the CloudHost entity.
// If the CloudHost object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudHostMutation) OldInstanceEniCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstanceEniCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstanceEniCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstanceEniCount: %w", err)
	}
	return oldValue.InstanceEniCount, nil
}

// AddInstanceEniCount adds i to the "instanceEniCount" field.
func (m *CloudHostMutation) AddInstanceEniCount(i int64) {
	if m.addinstanceEniCount != nil {
		*m.addinstanceEniCount += i
	} else {
		m.addinstanceEniCount = &i
	}
}

// AddedInstanceEniCount returns the value that was added to the "instanceEniCount" field in this mutation.
func (m *CloudHostMutation) AddedInstanceEniCount() (r int64, exists bool) {
	v := m.addinstanceEniCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetInstanceEniCount resets all changes to the "instanceEniCount" field.
func (m *CloudHostMutation) ResetInstanceEniCount() {
	m.instanceEniCount = nil
	m.addinstanceEniCount = nil
}

// Where appends a list predicates to the CloudHostMutation builder.
func (m *CloudHostMutation) Where(ps ...predicate.CloudHost) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CloudHostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CloudHostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CloudHost, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CloudHostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CloudHostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CloudHost).
func (m *CloudHostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CloudHostMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.instanceId != nil {
		fields = append(fields, cloudhost.FieldInstanceId)
	}
	if m.vpcId != nil {
		fields = append(fields, cloudhost.FieldVpcId)
	}
	if m.subnetId != nil {
		fields = append(fields, cloudhost.FieldSubnetId)
	}
	if m.instanceName != nil {
		fields = append(fields, cloudhost.FieldInstanceName)
	}
	if m.instanceState != nil {
		fields = append(fields, cloudhost.FieldInstanceState)
	}
	if m.cpu != nil {
		fields = append(fields, cloudhost.FieldCPU)
	}
	if m.memory != nil {
		fields = append(fields, cloudhost.FieldMemory)
	}
	if m.createdTime != nil {
		fields = append(fields, cloudhost.FieldCreatedTime)
	}
	if m.instanceType != nil {
		fields = append(fields, cloudhost.FieldInstanceType)
	}
	if m.eniLimit != nil {
		fields = append(fields, cloudhost.FieldEniLimit)
	}
	if m.enilpLimit != nil {
		fields = append(fields, cloudhost.FieldEnilpLimit)
	}
	if m.instanceEniCount != nil {
		fields = append(fields, cloudhost.FieldInstanceEniCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CloudHostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cloudhost.FieldInstanceId:
		return m.InstanceId()
	case cloudhost.FieldVpcId:
		return m.VpcId()
	case cloudhost.FieldSubnetId:
		return m.SubnetId()
	case cloudhost.FieldInstanceName:
		return m.InstanceName()
	case cloudhost.FieldInstanceState:
		return m.InstanceState()
	case cloudhost.FieldCPU:
		return m.CPU()
	case cloudhost.FieldMemory:
		return m.Memory()
	case cloudhost.FieldCreatedTime:
		return m.CreatedTime()
	case cloudhost.FieldInstanceType:
		return m.InstanceType()
	case cloudhost.FieldEniLimit:
		return m.EniLimit()
	case cloudhost.FieldEnilpLimit:
		return m.EnilpLimit()
	case cloudhost.FieldInstanceEniCount:
		return m.InstanceEniCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CloudHostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cloudhost.FieldInstanceId:
		return m.OldInstanceId(ctx)
	case cloudhost.FieldVpcId:
		return m.OldVpcId(ctx)
	case cloudhost.FieldSubnetId:
		return m.OldSubnetId(ctx)
	case cloudhost.FieldInstanceName:
		return m.OldInstanceName(ctx)
	case cloudhost.FieldInstanceState:
		return m.OldInstanceState(ctx)
	case cloudhost.FieldCPU:
		return m.OldCPU(ctx)
	case cloudhost.FieldMemory:
		return m.OldMemory(ctx)
	case cloudhost.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	case cloudhost.FieldInstanceType:
		return m.OldInstanceType(ctx)
	case cloudhost.FieldEniLimit:
		return m.OldEniLimit(ctx)
	case cloudhost.FieldEnilpLimit:
		return m.OldEnilpLimit(ctx)
	case cloudhost.FieldInstanceEniCount:
		return m.OldInstanceEniCount(ctx)
	}
	return nil, fmt.Errorf("unknown CloudHost field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudHostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cloudhost.FieldInstanceId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceId(v)
		return nil
	case cloudhost.FieldVpcId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVpcId(v)
		return nil
	case cloudhost.FieldSubnetId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubnetId(v)
		return nil
	case cloudhost.FieldInstanceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceName(v)
		return nil
	case cloudhost.FieldInstanceState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceState(v)
		return nil
	case cloudhost.FieldCPU:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCPU(v)
		return nil
	case cloudhost.FieldMemory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case cloudhost.FieldCreatedTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	case cloudhost.FieldInstanceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceType(v)
		return nil
	case cloudhost.FieldEniLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEniLimit(v)
		return nil
	case cloudhost.FieldEnilpLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnilpLimit(v)
		return nil
	case cloudhost.FieldInstanceEniCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstanceEniCount(v)
		return nil
	}
	return fmt.Errorf("unknown CloudHost field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CloudHostMutation) AddedFields() []string {
	var fields []string
	if m.addcpu != nil {
		fields = append(fields, cloudhost.FieldCPU)
	}
	if m.addmemory != nil {
		fields = append(fields, cloudhost.FieldMemory)
	}
	if m.addeniLimit != nil {
		fields = append(fields, cloudhost.FieldEniLimit)
	}
	if m.addenilpLimit != nil {
		fields = append(fields, cloudhost.FieldEnilpLimit)
	}
	if m.addinstanceEniCount != nil {
		fields = append(fields, cloudhost.FieldInstanceEniCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CloudHostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cloudhost.FieldCPU:
		return m.AddedCPU()
	case cloudhost.FieldMemory:
		return m.AddedMemory()
	case cloudhost.FieldEniLimit:
		return m.AddedEniLimit()
	case cloudhost.FieldEnilpLimit:
		return m.AddedEnilpLimit()
	case cloudhost.FieldInstanceEniCount:
		return m.AddedInstanceEniCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudHostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cloudhost.FieldCPU:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCPU(v)
		return nil
	case cloudhost.FieldMemory:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemory(v)
		return nil
	case cloudhost.FieldEniLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEniLimit(v)
		return nil
	case cloudhost.FieldEnilpLimit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnilpLimit(v)
		return nil
	case cloudhost.FieldInstanceEniCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInstanceEniCount(v)
		return nil
	}
	return fmt.Errorf("unknown CloudHost numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CloudHostMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CloudHostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CloudHostMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CloudHost nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CloudHostMutation) ResetField(name string) error {
	switch name {
	case cloudhost.FieldInstanceId:
		m.ResetInstanceId()
		return nil
	case cloudhost.FieldVpcId:
		m.ResetVpcId()
		return nil
	case cloudhost.FieldSubnetId:
		m.ResetSubnetId()
		return nil
	case cloudhost.FieldInstanceName:
		m.ResetInstanceName()
		return nil
	case cloudhost.FieldInstanceState:
		m.ResetInstanceState()
		return nil
	case cloudhost.FieldCPU:
		m.ResetCPU()
		return nil
	case cloudhost.FieldMemory:
		m.ResetMemory()
		return nil
	case cloudhost.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	case cloudhost.FieldInstanceType:
		m.ResetInstanceType()
		return nil
	case cloudhost.FieldEniLimit:
		m.ResetEniLimit()
		return nil
	case cloudhost.FieldEnilpLimit:
		m.ResetEnilpLimit()
		return nil
	case cloudhost.FieldInstanceEniCount:
		m.ResetInstanceEniCount()
		return nil
	}
	return fmt.Errorf("unknown CloudHost field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CloudHostMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CloudHostMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CloudHostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CloudHostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CloudHostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CloudHostMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CloudHostMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CloudHost unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CloudHostMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CloudHost edge %s", name)
}

// CloudProviderMutation represents an operation that mutates the CloudProvider nodes in the graph.
type CloudProviderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	secret        *string
	_type         *int64
	add_type      *int64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CloudProvider, error)
	predicates    []predicate.CloudProvider
}

var _ ent.Mutation = (*CloudProviderMutation)(nil)

// cloudproviderOption allows management of the mutation configuration using functional options.
type cloudproviderOption func(*CloudProviderMutation)

// newCloudProviderMutation creates new mutation for the CloudProvider entity.
func newCloudProviderMutation(c config, op Op, opts ...cloudproviderOption) *CloudProviderMutation {
	m := &CloudProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeCloudProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCloudProviderID sets the ID field of the mutation.
func withCloudProviderID(id int) cloudproviderOption {
	return func(m *CloudProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *CloudProvider
		)
		m.oldValue = func(ctx context.Context) (*CloudProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CloudProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCloudProvider sets the old CloudProvider of the mutation.
func withCloudProvider(node *CloudProvider) cloudproviderOption {
	return func(m *CloudProviderMutation) {
		m.oldValue = func(context.Context) (*CloudProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CloudProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CloudProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CloudProviderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CloudProviderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CloudProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *CloudProviderMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *CloudProviderMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the CloudProvider entity.
// If the CloudProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudProviderMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *CloudProviderMutation) ResetKey() {
	m.key = nil
}

// SetSecret sets the "secret" field.
func (m *CloudProviderMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *CloudProviderMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the CloudProvider entity.
// If the CloudProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudProviderMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *CloudProviderMutation) ResetSecret() {
	m.secret = nil
}

// SetType sets the "type" field.
func (m *CloudProviderMutation) SetType(i int64) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *CloudProviderMutation) GetType() (r int64, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CloudProvider entity.
// If the CloudProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudProviderMutation) OldType(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *CloudProviderMutation) AddType(i int64) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *CloudProviderMutation) AddedType() (r int64, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *CloudProviderMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetName sets the "name" field.
func (m *CloudProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CloudProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CloudProvider entity.
// If the CloudProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CloudProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CloudProviderMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the CloudProviderMutation builder.
func (m *CloudProviderMutation) Where(ps ...predicate.CloudProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CloudProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CloudProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CloudProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CloudProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CloudProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CloudProvider).
func (m *CloudProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CloudProviderMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.key != nil {
		fields = append(fields, cloudprovider.FieldKey)
	}
	if m.secret != nil {
		fields = append(fields, cloudprovider.FieldSecret)
	}
	if m._type != nil {
		fields = append(fields, cloudprovider.FieldType)
	}
	if m.name != nil {
		fields = append(fields, cloudprovider.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CloudProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cloudprovider.FieldKey:
		return m.Key()
	case cloudprovider.FieldSecret:
		return m.Secret()
	case cloudprovider.FieldType:
		return m.GetType()
	case cloudprovider.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CloudProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cloudprovider.FieldKey:
		return m.OldKey(ctx)
	case cloudprovider.FieldSecret:
		return m.OldSecret(ctx)
	case cloudprovider.FieldType:
		return m.OldType(ctx)
	case cloudprovider.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown CloudProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cloudprovider.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case cloudprovider.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case cloudprovider.FieldType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case cloudprovider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown CloudProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CloudProviderMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, cloudprovider.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CloudProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cloudprovider.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CloudProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cloudprovider.FieldType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown CloudProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CloudProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CloudProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CloudProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CloudProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CloudProviderMutation) ResetField(name string) error {
	switch name {
	case cloudprovider.FieldKey:
		m.ResetKey()
		return nil
	case cloudprovider.FieldSecret:
		m.ResetSecret()
		return nil
	case cloudprovider.FieldType:
		m.ResetType()
		return nil
	case cloudprovider.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown CloudProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CloudProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CloudProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CloudProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CloudProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CloudProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CloudProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CloudProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CloudProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CloudProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CloudProvider edge %s", name)
}

// ClusterMutation represents an operation that mutates the Cluster nodes in the graph.
type ClusterMutation struct {
	config
	op            Op
	typ           string
	id            *int
	kubeconfig    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cluster, error)
	predicates    []predicate.Cluster
}

var _ ent.Mutation = (*ClusterMutation)(nil)

// clusterOption allows management of the mutation configuration using functional options.
type clusterOption func(*ClusterMutation)

// newClusterMutation creates new mutation for the Cluster entity.
func newClusterMutation(c config, op Op, opts ...clusterOption) *ClusterMutation {
	m := &ClusterMutation{
		config:        c,
		op:            op,
		typ:           TypeCluster,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClusterID sets the ID field of the mutation.
func withClusterID(id int) clusterOption {
	return func(m *ClusterMutation) {
		var (
			err   error
			once  sync.Once
			value *Cluster
		)
		m.oldValue = func(ctx context.Context) (*Cluster, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cluster.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCluster sets the old Cluster of the mutation.
func withCluster(node *Cluster) clusterOption {
	return func(m *ClusterMutation) {
		m.oldValue = func(context.Context) (*Cluster, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClusterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClusterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClusterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClusterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cluster.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKubeconfig sets the "kubeconfig" field.
func (m *ClusterMutation) SetKubeconfig(s string) {
	m.kubeconfig = &s
}

// Kubeconfig returns the value of the "kubeconfig" field in the mutation.
func (m *ClusterMutation) Kubeconfig() (r string, exists bool) {
	v := m.kubeconfig
	if v == nil {
		return
	}
	return *v, true
}

// OldKubeconfig returns the old "kubeconfig" field's value of the Cluster entity.
// If the Cluster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClusterMutation) OldKubeconfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKubeconfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKubeconfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKubeconfig: %w", err)
	}
	return oldValue.Kubeconfig, nil
}

// ResetKubeconfig resets all changes to the "kubeconfig" field.
func (m *ClusterMutation) ResetKubeconfig() {
	m.kubeconfig = nil
}

// Where appends a list predicates to the ClusterMutation builder.
func (m *ClusterMutation) Where(ps ...predicate.Cluster) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClusterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClusterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cluster, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClusterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClusterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cluster).
func (m *ClusterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClusterMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.kubeconfig != nil {
		fields = append(fields, cluster.FieldKubeconfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClusterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cluster.FieldKubeconfig:
		return m.Kubeconfig()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClusterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cluster.FieldKubeconfig:
		return m.OldKubeconfig(ctx)
	}
	return nil, fmt.Errorf("unknown Cluster field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClusterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cluster.FieldKubeconfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKubeconfig(v)
		return nil
	}
	return fmt.Errorf("unknown Cluster field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClusterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClusterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClusterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Cluster numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClusterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClusterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClusterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cluster nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClusterMutation) ResetField(name string) error {
	switch name {
	case cluster.FieldKubeconfig:
		m.ResetKubeconfig()
		return nil
	}
	return fmt.Errorf("unknown Cluster field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClusterMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClusterMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClusterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClusterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClusterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClusterMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClusterMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cluster unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClusterMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cluster edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	age           *int
	addage        *int
	name          *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
