// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit/ent/cloudprovider"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CloudProvider is the model entity for the CloudProvider schema.
type CloudProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// 1是腾讯云2是华为云
	Type int64 `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CloudProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cloudprovider.FieldID, cloudprovider.FieldType:
			values[i] = new(sql.NullInt64)
		case cloudprovider.FieldKey, cloudprovider.FieldSecret, cloudprovider.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CloudProvider fields.
func (cp *CloudProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cloudprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case cloudprovider.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				cp.Key = value.String
			}
		case cloudprovider.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				cp.Secret = value.String
			}
		case cloudprovider.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cp.Type = value.Int64
			}
		case cloudprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cp.Name = value.String
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CloudProvider.
// This includes values selected through modifiers, order, etc.
func (cp *CloudProvider) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// Update returns a builder for updating this CloudProvider.
// Note that you need to call CloudProvider.Unwrap() before calling this method if this CloudProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CloudProvider) Update() *CloudProviderUpdateOne {
	return NewCloudProviderClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CloudProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CloudProvider) Unwrap() *CloudProvider {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CloudProvider is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CloudProvider) String() string {
	var builder strings.Builder
	builder.WriteString("CloudProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("key=")
	builder.WriteString(cp.Key)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(cp.Secret)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cp.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cp.Name)
	builder.WriteByte(')')
	return builder.String()
}

// CloudProviders is a parsable slice of CloudProvider.
type CloudProviders []*CloudProvider
