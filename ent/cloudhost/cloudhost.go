// Code generated by ent, DO NOT EDIT.

package cloudhost

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cloudhost type in the database.
	Label = "cloud_host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldIpv6AddressPrivate holds the string denoting the ipv6addressprivate field in the database.
	FieldIpv6AddressPrivate = "ipv6address_private"
	// FieldIpv6AddressPublic holds the string denoting the ipv6addresspublic field in the database.
	FieldIpv6AddressPublic = "ipv6address_public"
	// FieldIpv4AddressPrivate holds the string denoting the ipv4addressprivate field in the database.
	FieldIpv4AddressPrivate = "ipv4address_private"
	// FieldIpv4AddressPublic holds the string denoting the ipv4addresspublic field in the database.
	FieldIpv4AddressPublic = "ipv4address_public"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldCreatedTime holds the string denoting the createdtime field in the database.
	FieldCreatedTime = "created_time"
	// FieldExpiredTime holds the string denoting the expiredtime field in the database.
	FieldExpiredTime = "expired_time"
	// FieldInstanceName holds the string denoting the instancename field in the database.
	FieldInstanceName = "instance_name"
	// FieldImageName holds the string denoting the imagename field in the database.
	FieldImageName = "image_name"
	// FieldOsType holds the string denoting the ostype field in the database.
	FieldOsType = "os_type"
	// FieldManufacturer holds the string denoting the manufacturer field in the database.
	FieldManufacturer = "manufacturer"
	// FieldZone holds the string denoting the zone field in the database.
	FieldZone = "zone"
	// FieldSecurityGroups holds the string denoting the securitygroups field in the database.
	FieldSecurityGroups = "security_groups"
	// FieldBillType holds the string denoting the billtype field in the database.
	FieldBillType = "bill_type"
	// FieldChargeType holds the string denoting the chargetype field in the database.
	FieldChargeType = "charge_type"
	// FieldIsActive holds the string denoting the isactive field in the database.
	FieldIsActive = "is_active"
	// FieldInstanceType holds the string denoting the instancetype field in the database.
	FieldInstanceType = "instance_type"
	// Table holds the table name of the cloudhost in the database.
	Table = "cloud_hosts"
)

// Columns holds all SQL columns for cloudhost fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldState,
	FieldIpv6AddressPrivate,
	FieldIpv6AddressPublic,
	FieldIpv4AddressPrivate,
	FieldIpv4AddressPublic,
	FieldMemory,
	FieldCPU,
	FieldCreatedTime,
	FieldExpiredTime,
	FieldInstanceName,
	FieldImageName,
	FieldOsType,
	FieldManufacturer,
	FieldZone,
	FieldSecurityGroups,
	FieldBillType,
	FieldChargeType,
	FieldIsActive,
	FieldInstanceType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UUIDValidator is a validator for the "uuid" field. It is called by the builders before save.
	UUIDValidator func(string) error
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState string
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "isActive" field.
	DefaultIsActive bool
)

// OrderOption defines the ordering options for the CloudHost queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUUID orders the results by the uuid field.
func ByUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUUID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByIpv6AddressPrivate orders the results by the ipv6AddressPrivate field.
func ByIpv6AddressPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv6AddressPrivate, opts...).ToFunc()
}

// ByIpv6AddressPublic orders the results by the ipv6AddressPublic field.
func ByIpv6AddressPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv6AddressPublic, opts...).ToFunc()
}

// ByIpv4AddressPrivate orders the results by the ipv4AddressPrivate field.
func ByIpv4AddressPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv4AddressPrivate, opts...).ToFunc()
}

// ByIpv4AddressPublic orders the results by the ipv4AddressPublic field.
func ByIpv4AddressPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv4AddressPublic, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByCreatedTime orders the results by the createdTime field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByExpiredTime orders the results by the expiredTime field.
func ByExpiredTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredTime, opts...).ToFunc()
}

// ByInstanceName orders the results by the instanceName field.
func ByInstanceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceName, opts...).ToFunc()
}

// ByImageName orders the results by the imageName field.
func ByImageName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageName, opts...).ToFunc()
}

// ByOsType orders the results by the osType field.
func ByOsType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsType, opts...).ToFunc()
}

// ByManufacturer orders the results by the manufacturer field.
func ByManufacturer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManufacturer, opts...).ToFunc()
}

// ByZone orders the results by the zone field.
func ByZone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZone, opts...).ToFunc()
}

// BySecurityGroups orders the results by the securityGroups field.
func BySecurityGroups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityGroups, opts...).ToFunc()
}

// ByBillType orders the results by the billType field.
func ByBillType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillType, opts...).ToFunc()
}

// ByChargeType orders the results by the chargeType field.
func ByChargeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChargeType, opts...).ToFunc()
}

// ByIsActive orders the results by the isActive field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByInstanceType orders the results by the instanceType field.
func ByInstanceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceType, opts...).ToFunc()
}
