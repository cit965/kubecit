// Code generated by ent, DO NOT EDIT.

package cloudhost

import (
	"kubecit/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldID, id))
}

// InstanceId applies equality check predicate on the "instanceId" field. It's identical to InstanceIdEQ.
func InstanceId(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceId, v))
}

// VpcId applies equality check predicate on the "vpcId" field. It's identical to VpcIdEQ.
func VpcId(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldVpcId, v))
}

// SubnetId applies equality check predicate on the "subnetId" field. It's identical to SubnetIdEQ.
func SubnetId(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldSubnetId, v))
}

// InstanceName applies equality check predicate on the "instanceName" field. It's identical to InstanceNameEQ.
func InstanceName(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceName, v))
}

// InstanceState applies equality check predicate on the "instanceState" field. It's identical to InstanceStateEQ.
func InstanceState(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceState, v))
}

// CPU applies equality check predicate on the "cpu" field. It's identical to CPUEQ.
func CPU(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldCPU, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldMemory, v))
}

// CreatedTime applies equality check predicate on the "createdTime" field. It's identical to CreatedTimeEQ.
func CreatedTime(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldCreatedTime, v))
}

// InstanceType applies equality check predicate on the "instanceType" field. It's identical to InstanceTypeEQ.
func InstanceType(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceType, v))
}

// EniLimit applies equality check predicate on the "eniLimit" field. It's identical to EniLimitEQ.
func EniLimit(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldEniLimit, v))
}

// EnilpLimit applies equality check predicate on the "enilpLimit" field. It's identical to EnilpLimitEQ.
func EnilpLimit(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldEnilpLimit, v))
}

// InstanceEniCount applies equality check predicate on the "instanceEniCount" field. It's identical to InstanceEniCountEQ.
func InstanceEniCount(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceEniCount, v))
}

// InstanceIdEQ applies the EQ predicate on the "instanceId" field.
func InstanceIdEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceId, v))
}

// InstanceIdNEQ applies the NEQ predicate on the "instanceId" field.
func InstanceIdNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldInstanceId, v))
}

// InstanceIdIn applies the In predicate on the "instanceId" field.
func InstanceIdIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldInstanceId, vs...))
}

// InstanceIdNotIn applies the NotIn predicate on the "instanceId" field.
func InstanceIdNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldInstanceId, vs...))
}

// InstanceIdGT applies the GT predicate on the "instanceId" field.
func InstanceIdGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldInstanceId, v))
}

// InstanceIdGTE applies the GTE predicate on the "instanceId" field.
func InstanceIdGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldInstanceId, v))
}

// InstanceIdLT applies the LT predicate on the "instanceId" field.
func InstanceIdLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldInstanceId, v))
}

// InstanceIdLTE applies the LTE predicate on the "instanceId" field.
func InstanceIdLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldInstanceId, v))
}

// InstanceIdContains applies the Contains predicate on the "instanceId" field.
func InstanceIdContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldInstanceId, v))
}

// InstanceIdHasPrefix applies the HasPrefix predicate on the "instanceId" field.
func InstanceIdHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldInstanceId, v))
}

// InstanceIdHasSuffix applies the HasSuffix predicate on the "instanceId" field.
func InstanceIdHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldInstanceId, v))
}

// InstanceIdEqualFold applies the EqualFold predicate on the "instanceId" field.
func InstanceIdEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldInstanceId, v))
}

// InstanceIdContainsFold applies the ContainsFold predicate on the "instanceId" field.
func InstanceIdContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldInstanceId, v))
}

// VpcIdEQ applies the EQ predicate on the "vpcId" field.
func VpcIdEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldVpcId, v))
}

// VpcIdNEQ applies the NEQ predicate on the "vpcId" field.
func VpcIdNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldVpcId, v))
}

// VpcIdIn applies the In predicate on the "vpcId" field.
func VpcIdIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldVpcId, vs...))
}

// VpcIdNotIn applies the NotIn predicate on the "vpcId" field.
func VpcIdNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldVpcId, vs...))
}

// VpcIdGT applies the GT predicate on the "vpcId" field.
func VpcIdGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldVpcId, v))
}

// VpcIdGTE applies the GTE predicate on the "vpcId" field.
func VpcIdGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldVpcId, v))
}

// VpcIdLT applies the LT predicate on the "vpcId" field.
func VpcIdLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldVpcId, v))
}

// VpcIdLTE applies the LTE predicate on the "vpcId" field.
func VpcIdLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldVpcId, v))
}

// VpcIdContains applies the Contains predicate on the "vpcId" field.
func VpcIdContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldVpcId, v))
}

// VpcIdHasPrefix applies the HasPrefix predicate on the "vpcId" field.
func VpcIdHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldVpcId, v))
}

// VpcIdHasSuffix applies the HasSuffix predicate on the "vpcId" field.
func VpcIdHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldVpcId, v))
}

// VpcIdEqualFold applies the EqualFold predicate on the "vpcId" field.
func VpcIdEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldVpcId, v))
}

// VpcIdContainsFold applies the ContainsFold predicate on the "vpcId" field.
func VpcIdContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldVpcId, v))
}

// SubnetIdEQ applies the EQ predicate on the "subnetId" field.
func SubnetIdEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldSubnetId, v))
}

// SubnetIdNEQ applies the NEQ predicate on the "subnetId" field.
func SubnetIdNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldSubnetId, v))
}

// SubnetIdIn applies the In predicate on the "subnetId" field.
func SubnetIdIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldSubnetId, vs...))
}

// SubnetIdNotIn applies the NotIn predicate on the "subnetId" field.
func SubnetIdNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldSubnetId, vs...))
}

// SubnetIdGT applies the GT predicate on the "subnetId" field.
func SubnetIdGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldSubnetId, v))
}

// SubnetIdGTE applies the GTE predicate on the "subnetId" field.
func SubnetIdGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldSubnetId, v))
}

// SubnetIdLT applies the LT predicate on the "subnetId" field.
func SubnetIdLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldSubnetId, v))
}

// SubnetIdLTE applies the LTE predicate on the "subnetId" field.
func SubnetIdLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldSubnetId, v))
}

// SubnetIdContains applies the Contains predicate on the "subnetId" field.
func SubnetIdContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldSubnetId, v))
}

// SubnetIdHasPrefix applies the HasPrefix predicate on the "subnetId" field.
func SubnetIdHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldSubnetId, v))
}

// SubnetIdHasSuffix applies the HasSuffix predicate on the "subnetId" field.
func SubnetIdHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldSubnetId, v))
}

// SubnetIdEqualFold applies the EqualFold predicate on the "subnetId" field.
func SubnetIdEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldSubnetId, v))
}

// SubnetIdContainsFold applies the ContainsFold predicate on the "subnetId" field.
func SubnetIdContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldSubnetId, v))
}

// InstanceNameEQ applies the EQ predicate on the "instanceName" field.
func InstanceNameEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceName, v))
}

// InstanceNameNEQ applies the NEQ predicate on the "instanceName" field.
func InstanceNameNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldInstanceName, v))
}

// InstanceNameIn applies the In predicate on the "instanceName" field.
func InstanceNameIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldInstanceName, vs...))
}

// InstanceNameNotIn applies the NotIn predicate on the "instanceName" field.
func InstanceNameNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldInstanceName, vs...))
}

// InstanceNameGT applies the GT predicate on the "instanceName" field.
func InstanceNameGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldInstanceName, v))
}

// InstanceNameGTE applies the GTE predicate on the "instanceName" field.
func InstanceNameGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldInstanceName, v))
}

// InstanceNameLT applies the LT predicate on the "instanceName" field.
func InstanceNameLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldInstanceName, v))
}

// InstanceNameLTE applies the LTE predicate on the "instanceName" field.
func InstanceNameLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldInstanceName, v))
}

// InstanceNameContains applies the Contains predicate on the "instanceName" field.
func InstanceNameContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldInstanceName, v))
}

// InstanceNameHasPrefix applies the HasPrefix predicate on the "instanceName" field.
func InstanceNameHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldInstanceName, v))
}

// InstanceNameHasSuffix applies the HasSuffix predicate on the "instanceName" field.
func InstanceNameHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldInstanceName, v))
}

// InstanceNameEqualFold applies the EqualFold predicate on the "instanceName" field.
func InstanceNameEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldInstanceName, v))
}

// InstanceNameContainsFold applies the ContainsFold predicate on the "instanceName" field.
func InstanceNameContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldInstanceName, v))
}

// InstanceStateEQ applies the EQ predicate on the "instanceState" field.
func InstanceStateEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceState, v))
}

// InstanceStateNEQ applies the NEQ predicate on the "instanceState" field.
func InstanceStateNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldInstanceState, v))
}

// InstanceStateIn applies the In predicate on the "instanceState" field.
func InstanceStateIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldInstanceState, vs...))
}

// InstanceStateNotIn applies the NotIn predicate on the "instanceState" field.
func InstanceStateNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldInstanceState, vs...))
}

// InstanceStateGT applies the GT predicate on the "instanceState" field.
func InstanceStateGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldInstanceState, v))
}

// InstanceStateGTE applies the GTE predicate on the "instanceState" field.
func InstanceStateGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldInstanceState, v))
}

// InstanceStateLT applies the LT predicate on the "instanceState" field.
func InstanceStateLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldInstanceState, v))
}

// InstanceStateLTE applies the LTE predicate on the "instanceState" field.
func InstanceStateLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldInstanceState, v))
}

// InstanceStateContains applies the Contains predicate on the "instanceState" field.
func InstanceStateContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldInstanceState, v))
}

// InstanceStateHasPrefix applies the HasPrefix predicate on the "instanceState" field.
func InstanceStateHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldInstanceState, v))
}

// InstanceStateHasSuffix applies the HasSuffix predicate on the "instanceState" field.
func InstanceStateHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldInstanceState, v))
}

// InstanceStateEqualFold applies the EqualFold predicate on the "instanceState" field.
func InstanceStateEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldInstanceState, v))
}

// InstanceStateContainsFold applies the ContainsFold predicate on the "instanceState" field.
func InstanceStateContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldInstanceState, v))
}

// CPUEQ applies the EQ predicate on the "cpu" field.
func CPUEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldCPU, v))
}

// CPUNEQ applies the NEQ predicate on the "cpu" field.
func CPUNEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldCPU, v))
}

// CPUIn applies the In predicate on the "cpu" field.
func CPUIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldCPU, vs...))
}

// CPUNotIn applies the NotIn predicate on the "cpu" field.
func CPUNotIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldCPU, vs...))
}

// CPUGT applies the GT predicate on the "cpu" field.
func CPUGT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldCPU, v))
}

// CPUGTE applies the GTE predicate on the "cpu" field.
func CPUGTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldCPU, v))
}

// CPULT applies the LT predicate on the "cpu" field.
func CPULT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldCPU, v))
}

// CPULTE applies the LTE predicate on the "cpu" field.
func CPULTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldCPU, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldMemory, v))
}

// CreatedTimeEQ applies the EQ predicate on the "createdTime" field.
func CreatedTimeEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "createdTime" field.
func CreatedTimeNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "createdTime" field.
func CreatedTimeIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "createdTime" field.
func CreatedTimeNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "createdTime" field.
func CreatedTimeGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "createdTime" field.
func CreatedTimeGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "createdTime" field.
func CreatedTimeLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "createdTime" field.
func CreatedTimeLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldCreatedTime, v))
}

// CreatedTimeContains applies the Contains predicate on the "createdTime" field.
func CreatedTimeContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldCreatedTime, v))
}

// CreatedTimeHasPrefix applies the HasPrefix predicate on the "createdTime" field.
func CreatedTimeHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldCreatedTime, v))
}

// CreatedTimeHasSuffix applies the HasSuffix predicate on the "createdTime" field.
func CreatedTimeHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldCreatedTime, v))
}

// CreatedTimeEqualFold applies the EqualFold predicate on the "createdTime" field.
func CreatedTimeEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldCreatedTime, v))
}

// CreatedTimeContainsFold applies the ContainsFold predicate on the "createdTime" field.
func CreatedTimeContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldCreatedTime, v))
}

// InstanceTypeEQ applies the EQ predicate on the "instanceType" field.
func InstanceTypeEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceType, v))
}

// InstanceTypeNEQ applies the NEQ predicate on the "instanceType" field.
func InstanceTypeNEQ(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldInstanceType, v))
}

// InstanceTypeIn applies the In predicate on the "instanceType" field.
func InstanceTypeIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldInstanceType, vs...))
}

// InstanceTypeNotIn applies the NotIn predicate on the "instanceType" field.
func InstanceTypeNotIn(vs ...string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldInstanceType, vs...))
}

// InstanceTypeGT applies the GT predicate on the "instanceType" field.
func InstanceTypeGT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldInstanceType, v))
}

// InstanceTypeGTE applies the GTE predicate on the "instanceType" field.
func InstanceTypeGTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldInstanceType, v))
}

// InstanceTypeLT applies the LT predicate on the "instanceType" field.
func InstanceTypeLT(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldInstanceType, v))
}

// InstanceTypeLTE applies the LTE predicate on the "instanceType" field.
func InstanceTypeLTE(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldInstanceType, v))
}

// InstanceTypeContains applies the Contains predicate on the "instanceType" field.
func InstanceTypeContains(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContains(FieldInstanceType, v))
}

// InstanceTypeHasPrefix applies the HasPrefix predicate on the "instanceType" field.
func InstanceTypeHasPrefix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasPrefix(FieldInstanceType, v))
}

// InstanceTypeHasSuffix applies the HasSuffix predicate on the "instanceType" field.
func InstanceTypeHasSuffix(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldHasSuffix(FieldInstanceType, v))
}

// InstanceTypeEqualFold applies the EqualFold predicate on the "instanceType" field.
func InstanceTypeEqualFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEqualFold(FieldInstanceType, v))
}

// InstanceTypeContainsFold applies the ContainsFold predicate on the "instanceType" field.
func InstanceTypeContainsFold(v string) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldContainsFold(FieldInstanceType, v))
}

// EniLimitEQ applies the EQ predicate on the "eniLimit" field.
func EniLimitEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldEniLimit, v))
}

// EniLimitNEQ applies the NEQ predicate on the "eniLimit" field.
func EniLimitNEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldEniLimit, v))
}

// EniLimitIn applies the In predicate on the "eniLimit" field.
func EniLimitIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldEniLimit, vs...))
}

// EniLimitNotIn applies the NotIn predicate on the "eniLimit" field.
func EniLimitNotIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldEniLimit, vs...))
}

// EniLimitGT applies the GT predicate on the "eniLimit" field.
func EniLimitGT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldEniLimit, v))
}

// EniLimitGTE applies the GTE predicate on the "eniLimit" field.
func EniLimitGTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldEniLimit, v))
}

// EniLimitLT applies the LT predicate on the "eniLimit" field.
func EniLimitLT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldEniLimit, v))
}

// EniLimitLTE applies the LTE predicate on the "eniLimit" field.
func EniLimitLTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldEniLimit, v))
}

// EnilpLimitEQ applies the EQ predicate on the "enilpLimit" field.
func EnilpLimitEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldEnilpLimit, v))
}

// EnilpLimitNEQ applies the NEQ predicate on the "enilpLimit" field.
func EnilpLimitNEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldEnilpLimit, v))
}

// EnilpLimitIn applies the In predicate on the "enilpLimit" field.
func EnilpLimitIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldEnilpLimit, vs...))
}

// EnilpLimitNotIn applies the NotIn predicate on the "enilpLimit" field.
func EnilpLimitNotIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldEnilpLimit, vs...))
}

// EnilpLimitGT applies the GT predicate on the "enilpLimit" field.
func EnilpLimitGT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldEnilpLimit, v))
}

// EnilpLimitGTE applies the GTE predicate on the "enilpLimit" field.
func EnilpLimitGTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldEnilpLimit, v))
}

// EnilpLimitLT applies the LT predicate on the "enilpLimit" field.
func EnilpLimitLT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldEnilpLimit, v))
}

// EnilpLimitLTE applies the LTE predicate on the "enilpLimit" field.
func EnilpLimitLTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldEnilpLimit, v))
}

// InstanceEniCountEQ applies the EQ predicate on the "instanceEniCount" field.
func InstanceEniCountEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldEQ(FieldInstanceEniCount, v))
}

// InstanceEniCountNEQ applies the NEQ predicate on the "instanceEniCount" field.
func InstanceEniCountNEQ(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNEQ(FieldInstanceEniCount, v))
}

// InstanceEniCountIn applies the In predicate on the "instanceEniCount" field.
func InstanceEniCountIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldIn(FieldInstanceEniCount, vs...))
}

// InstanceEniCountNotIn applies the NotIn predicate on the "instanceEniCount" field.
func InstanceEniCountNotIn(vs ...int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldNotIn(FieldInstanceEniCount, vs...))
}

// InstanceEniCountGT applies the GT predicate on the "instanceEniCount" field.
func InstanceEniCountGT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGT(FieldInstanceEniCount, v))
}

// InstanceEniCountGTE applies the GTE predicate on the "instanceEniCount" field.
func InstanceEniCountGTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldGTE(FieldInstanceEniCount, v))
}

// InstanceEniCountLT applies the LT predicate on the "instanceEniCount" field.
func InstanceEniCountLT(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLT(FieldInstanceEniCount, v))
}

// InstanceEniCountLTE applies the LTE predicate on the "instanceEniCount" field.
func InstanceEniCountLTE(v int64) predicate.CloudHost {
	return predicate.CloudHost(sql.FieldLTE(FieldInstanceEniCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CloudHost) predicate.CloudHost {
	return predicate.CloudHost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CloudHost) predicate.CloudHost {
	return predicate.CloudHost(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CloudHost) predicate.CloudHost {
	return predicate.CloudHost(func(s *sql.Selector) {
		p(s.Not())
	})
}
