// Code generated by MockGen. DO NOT EDIT.
// Source: kubecit/internal/biz (interfaces: ClusterRepo)

// Package mrepo is a generated GoMock package.
package mrepo

import (
	context "context"
	biz "kubecit/internal/biz"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClusterRepo is a mock of ClusterRepo interface.
type MockClusterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRepoMockRecorder
}

// MockClusterRepoMockRecorder is the mock recorder for MockClusterRepo.
type MockClusterRepoMockRecorder struct {
	mock *MockClusterRepo
}

// NewMockClusterRepo creates a new mock instance.
func NewMockClusterRepo(ctrl *gomock.Controller) *MockClusterRepo {
	mock := &MockClusterRepo{ctrl: ctrl}
	mock.recorder = &MockClusterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRepo) EXPECT() *MockClusterRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClusterRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockClusterRepo) Get(arg0 context.Context, arg1 int) (*biz.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*biz.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterRepo)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockClusterRepo) List(arg0 context.Context) ([]*biz.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*biz.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterRepoMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterRepo)(nil).List), arg0)
}

// Register mocks base method.
func (m *MockClusterRepo) Register(arg0 context.Context, arg1 *biz.Cluster) (*biz.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*biz.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockClusterRepoMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClusterRepo)(nil).Register), arg0, arg1)
}

// Update mocks base method.
func (m *MockClusterRepo) Update(arg0 context.Context, arg1 *biz.Cluster) (*biz.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*biz.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterRepo)(nil).Update), arg0, arg1)
}
